// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto

package com.google.spanner.v1;

/**
 * <pre>
 * The request for [ExecuteBatchDml][google.spanner.v1.Spanner.ExecuteBatchDml].
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest}
 */
public final class ExecuteBatchDmlRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.ExecuteBatchDmlRequest)
    ExecuteBatchDmlRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ExecuteBatchDmlRequest.newBuilder() to construct.
  private ExecuteBatchDmlRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExecuteBatchDmlRequest() {
    session_ = "";
    statements_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ExecuteBatchDmlRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.spanner.v1.ExecuteBatchDmlRequest.class, com.google.spanner.v1.ExecuteBatchDmlRequest.Builder.class);
  }

  public interface StatementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The sql.
     */
    java.lang.String getSql();
    /**
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The bytes for sql.
     */
    com.google.protobuf.ByteString
        getSqlBytes();

    /**
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     * @return Whether the params field is set.
     */
    boolean hasParams();
    /**
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     * @return The params.
     */
    com.google.protobuf.Struct getParams();
    /**
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     */
    com.google.protobuf.StructOrBuilder getParamsOrBuilder();

    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    int getParamTypesCount();
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    boolean containsParamTypes(
        java.lang.String key);
    /**
     * Use {@link #getParamTypesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.spanner.v1.Type>
    getParamTypes();
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    java.util.Map<java.lang.String, com.google.spanner.v1.Type>
    getParamTypesMap();
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    /* nullable */
com.google.spanner.v1.Type getParamTypesOrDefault(
        java.lang.String key,
        /* nullable */
com.google.spanner.v1.Type defaultValue);
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    com.google.spanner.v1.Type getParamTypesOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * A single DML statement.
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest.Statement}
   */
  public static final class Statement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
      StatementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Statement.newBuilder() to construct.
    private Statement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Statement() {
      sql_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Statement();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetParamTypes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.class, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder.class);
    }

    public static final int SQL_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object sql_ = "";
    /**
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The sql.
     */
    @java.lang.Override
    public java.lang.String getSql() {
      java.lang.Object ref = sql_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sql_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Required. The DML string.
     * </pre>
     *
     * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The bytes for sql.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSqlBytes() {
      java.lang.Object ref = sql_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sql_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARAMS_FIELD_NUMBER = 2;
    private com.google.protobuf.Struct params_;
    /**
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     * @return Whether the params field is set.
     */
    @java.lang.Override
    public boolean hasParams() {
      return params_ != null;
    }
    /**
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     * @return The params.
     */
    @java.lang.Override
    public com.google.protobuf.Struct getParams() {
      return params_ == null ? com.google.protobuf.Struct.getDefaultInstance() : params_;
    }
    /**
     * <pre>
     * Parameter names and values that bind to placeholders in the DML string.
     * A parameter placeholder consists of the `&#64;` character followed by the
     * parameter name (for example, `&#64;firstName`). Parameter names can contain
     * letters, numbers, and underscores.
     * Parameters can appear anywhere that a literal value is expected.  The
     * same parameter name can be used more than once, for example:
     * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
     * It is an error to execute a SQL statement with unbound parameters.
     * </pre>
     *
     * <code>.google.protobuf.Struct params = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.StructOrBuilder getParamsOrBuilder() {
      return params_ == null ? com.google.protobuf.Struct.getDefaultInstance() : params_;
    }

    public static final int PARAM_TYPES_FIELD_NUMBER = 3;
    private static final class ParamTypesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, com.google.spanner.v1.Type> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, com.google.spanner.v1.Type>newDefaultInstance(
                  com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_ParamTypesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  com.google.spanner.v1.Type.getDefaultInstance());
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, com.google.spanner.v1.Type> paramTypes_;
    private com.google.protobuf.MapField<java.lang.String, com.google.spanner.v1.Type>
    internalGetParamTypes() {
      if (paramTypes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParamTypesDefaultEntryHolder.defaultEntry);
      }
      return paramTypes_;
    }
    public int getParamTypesCount() {
      return internalGetParamTypes().getMap().size();
    }
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @java.lang.Override
    public boolean containsParamTypes(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetParamTypes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParamTypesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.spanner.v1.Type> getParamTypes() {
      return getParamTypesMap();
    }
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.google.spanner.v1.Type> getParamTypesMap() {
      return internalGetParamTypes().getMap();
    }
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @java.lang.Override
    public /* nullable */
com.google.spanner.v1.Type getParamTypesOrDefault(
        java.lang.String key,
        /* nullable */
com.google.spanner.v1.Type defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.spanner.v1.Type> map =
          internalGetParamTypes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * It is not always possible for Cloud Spanner to infer the right SQL type
     * from a JSON value.  For example, values of type `BYTES` and values
     * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
     * In these cases, `param_types` can be used to specify the exact
     * SQL type for some or all of the SQL statement parameters. See the
     * definition of [Type][google.spanner.v1.Type] for more information
     * about SQL types.
     * </pre>
     *
     * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
     */
    @java.lang.Override
    public com.google.spanner.v1.Type getParamTypesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.spanner.v1.Type> map =
          internalGetParamTypes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sql_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sql_);
      }
      if (params_ != null) {
        output.writeMessage(2, getParams());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetParamTypes(),
          ParamTypesDefaultEntryHolder.defaultEntry,
          3);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(sql_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sql_);
      }
      if (params_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getParams());
      }
      for (java.util.Map.Entry<java.lang.String, com.google.spanner.v1.Type> entry
           : internalGetParamTypes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, com.google.spanner.v1.Type>
        paramTypes__ = ParamTypesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, paramTypes__);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.spanner.v1.ExecuteBatchDmlRequest.Statement)) {
        return super.equals(obj);
      }
      com.google.spanner.v1.ExecuteBatchDmlRequest.Statement other = (com.google.spanner.v1.ExecuteBatchDmlRequest.Statement) obj;

      if (!getSql()
          .equals(other.getSql())) return false;
      if (hasParams() != other.hasParams()) return false;
      if (hasParams()) {
        if (!getParams()
            .equals(other.getParams())) return false;
      }
      if (!internalGetParamTypes().equals(
          other.internalGetParamTypes())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SQL_FIELD_NUMBER;
      hash = (53 * hash) + getSql().hashCode();
      if (hasParams()) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getParams().hashCode();
      }
      if (!internalGetParamTypes().getMap().isEmpty()) {
        hash = (37 * hash) + PARAM_TYPES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetParamTypes().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.spanner.v1.ExecuteBatchDmlRequest.Statement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A single DML statement.
     * </pre>
     *
     * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest.Statement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
        com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetParamTypes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableParamTypes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.class, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder.class);
      }

      // Construct using com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        sql_ = "";
        params_ = null;
        if (paramsBuilder_ != null) {
          paramsBuilder_.dispose();
          paramsBuilder_ = null;
        }
        internalGetMutableParamTypes().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_Statement_descriptor;
      }

      @java.lang.Override
      public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement getDefaultInstanceForType() {
        return com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement build() {
        com.google.spanner.v1.ExecuteBatchDmlRequest.Statement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement buildPartial() {
        com.google.spanner.v1.ExecuteBatchDmlRequest.Statement result = new com.google.spanner.v1.ExecuteBatchDmlRequest.Statement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.spanner.v1.ExecuteBatchDmlRequest.Statement result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.sql_ = sql_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.params_ = paramsBuilder_ == null
              ? params_
              : paramsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.paramTypes_ = internalGetParamTypes();
          result.paramTypes_.makeImmutable();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.spanner.v1.ExecuteBatchDmlRequest.Statement) {
          return mergeFrom((com.google.spanner.v1.ExecuteBatchDmlRequest.Statement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.spanner.v1.ExecuteBatchDmlRequest.Statement other) {
        if (other == com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.getDefaultInstance()) return this;
        if (!other.getSql().isEmpty()) {
          sql_ = other.sql_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        internalGetMutableParamTypes().mergeFrom(
            other.internalGetParamTypes());
        bitField0_ |= 0x00000004;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                sql_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getParamsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                com.google.protobuf.MapEntry<java.lang.String, com.google.spanner.v1.Type>
                paramTypes__ = input.readMessage(
                    ParamTypesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableParamTypes().getMutableMap().put(
                    paramTypes__.getKey(), paramTypes__.getValue());
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object sql_ = "";
      /**
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       * @return The sql.
       */
      public java.lang.String getSql() {
        java.lang.Object ref = sql_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sql_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       * @return The bytes for sql.
       */
      public com.google.protobuf.ByteString
          getSqlBytes() {
        java.lang.Object ref = sql_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sql_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       * @param value The sql to set.
       * @return This builder for chaining.
       */
      public Builder setSql(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        sql_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       * @return This builder for chaining.
       */
      public Builder clearSql() {
        sql_ = getDefaultInstance().getSql();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required. The DML string.
       * </pre>
       *
       * <code>string sql = 1 [(.google.api.field_behavior) = REQUIRED];</code>
       * @param value The bytes for sql to set.
       * @return This builder for chaining.
       */
      public Builder setSqlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        sql_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.Struct params_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> paramsBuilder_;
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       * @return Whether the params field is set.
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       * @return The params.
       */
      public com.google.protobuf.Struct getParams() {
        if (paramsBuilder_ == null) {
          return params_ == null ? com.google.protobuf.Struct.getDefaultInstance() : params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder setParams(com.google.protobuf.Struct value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder setParams(
          com.google.protobuf.Struct.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder mergeParams(com.google.protobuf.Struct value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            params_ != null &&
            params_ != com.google.protobuf.Struct.getDefaultInstance()) {
            getParamsBuilder().mergeFrom(value);
          } else {
            params_ = value;
          }
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public Builder clearParams() {
        bitField0_ = (bitField0_ & ~0x00000002);
        params_ = null;
        if (paramsBuilder_ != null) {
          paramsBuilder_.dispose();
          paramsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public com.google.protobuf.Struct.Builder getParamsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      public com.google.protobuf.StructOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_ == null ?
              com.google.protobuf.Struct.getDefaultInstance() : params_;
        }
      }
      /**
       * <pre>
       * Parameter names and values that bind to placeholders in the DML string.
       * A parameter placeholder consists of the `&#64;` character followed by the
       * parameter name (for example, `&#64;firstName`). Parameter names can contain
       * letters, numbers, and underscores.
       * Parameters can appear anywhere that a literal value is expected.  The
       * same parameter name can be used more than once, for example:
       * `"WHERE id &gt; &#64;msg_id AND id &lt; &#64;msg_id + 100"`
       * It is an error to execute a SQL statement with unbound parameters.
       * </pre>
       *
       * <code>.google.protobuf.Struct params = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, com.google.spanner.v1.Type> paramTypes_;
      private com.google.protobuf.MapField<java.lang.String, com.google.spanner.v1.Type>
          internalGetParamTypes() {
        if (paramTypes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ParamTypesDefaultEntryHolder.defaultEntry);
        }
        return paramTypes_;
      }
      private com.google.protobuf.MapField<java.lang.String, com.google.spanner.v1.Type>
          internalGetMutableParamTypes() {
        if (paramTypes_ == null) {
          paramTypes_ = com.google.protobuf.MapField.newMapField(
              ParamTypesDefaultEntryHolder.defaultEntry);
        }
        if (!paramTypes_.isMutable()) {
          paramTypes_ = paramTypes_.copy();
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return paramTypes_;
      }
      public int getParamTypesCount() {
        return internalGetParamTypes().getMap().size();
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @java.lang.Override
      public boolean containsParamTypes(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetParamTypes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getParamTypesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.spanner.v1.Type> getParamTypes() {
        return getParamTypesMap();
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.spanner.v1.Type> getParamTypesMap() {
        return internalGetParamTypes().getMap();
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @java.lang.Override
      public /* nullable */
com.google.spanner.v1.Type getParamTypesOrDefault(
          java.lang.String key,
          /* nullable */
com.google.spanner.v1.Type defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.spanner.v1.Type> map =
            internalGetParamTypes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      @java.lang.Override
      public com.google.spanner.v1.Type getParamTypesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, com.google.spanner.v1.Type> map =
            internalGetParamTypes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearParamTypes() {
        bitField0_ = (bitField0_ & ~0x00000004);
        internalGetMutableParamTypes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      public Builder removeParamTypes(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableParamTypes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.spanner.v1.Type>
          getMutableParamTypes() {
        bitField0_ |= 0x00000004;
        return internalGetMutableParamTypes().getMutableMap();
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      public Builder putParamTypes(
          java.lang.String key,
          com.google.spanner.v1.Type value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableParamTypes().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * It is not always possible for Cloud Spanner to infer the right SQL type
       * from a JSON value.  For example, values of type `BYTES` and values
       * of type `STRING` both appear in [params][google.spanner.v1.ExecuteBatchDmlRequest.Statement.params] as JSON strings.
       * In these cases, `param_types` can be used to specify the exact
       * SQL type for some or all of the SQL statement parameters. See the
       * definition of [Type][google.spanner.v1.Type] for more information
       * about SQL types.
       * </pre>
       *
       * <code>map&lt;string, .google.spanner.v1.Type&gt; param_types = 3;</code>
       */
      public Builder putAllParamTypes(
          java.util.Map<java.lang.String, com.google.spanner.v1.Type> values) {
        internalGetMutableParamTypes().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000004;
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
    }

    // @@protoc_insertion_point(class_scope:google.spanner.v1.ExecuteBatchDmlRequest.Statement)
    private static final com.google.spanner.v1.ExecuteBatchDmlRequest.Statement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.spanner.v1.ExecuteBatchDmlRequest.Statement();
    }

    public static com.google.spanner.v1.ExecuteBatchDmlRequest.Statement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Statement>
        PARSER = new com.google.protobuf.AbstractParser<Statement>() {
      @java.lang.Override
      public Statement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Statement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Statement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int SESSION_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object session_ = "";
  /**
   * <pre>
   * Required. The session in which the DML statements should be performed.
   * </pre>
   *
   * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The session.
   */
  @java.lang.Override
  public java.lang.String getSession() {
    java.lang.Object ref = session_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      session_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. The session in which the DML statements should be performed.
   * </pre>
   *
   * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for session.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSessionBytes() {
    java.lang.Object ref = session_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      session_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TRANSACTION_FIELD_NUMBER = 2;
  private com.google.spanner.v1.TransactionSelector transaction_;
  /**
   * <pre>
   * Required. The transaction to use. Must be a read-write transaction.
   * To protect against replays, single-use transactions are not supported. The
   * caller must either supply an existing transaction ID or begin a new
   * transaction.
   * </pre>
   *
   * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the transaction field is set.
   */
  @java.lang.Override
  public boolean hasTransaction() {
    return transaction_ != null;
  }
  /**
   * <pre>
   * Required. The transaction to use. Must be a read-write transaction.
   * To protect against replays, single-use transactions are not supported. The
   * caller must either supply an existing transaction ID or begin a new
   * transaction.
   * </pre>
   *
   * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The transaction.
   */
  @java.lang.Override
  public com.google.spanner.v1.TransactionSelector getTransaction() {
    return transaction_ == null ? com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
  }
  /**
   * <pre>
   * Required. The transaction to use. Must be a read-write transaction.
   * To protect against replays, single-use transactions are not supported. The
   * caller must either supply an existing transaction ID or begin a new
   * transaction.
   * </pre>
   *
   * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.spanner.v1.TransactionSelectorOrBuilder getTransactionOrBuilder() {
    return transaction_ == null ? com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
  }

  public static final int STATEMENTS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement> statements_;
  /**
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public java.util.List<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement> getStatementsList() {
    return statements_;
  }
  /**
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder> 
      getStatementsOrBuilderList() {
    return statements_;
  }
  /**
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public int getStatementsCount() {
    return statements_.size();
  }
  /**
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement getStatements(int index) {
    return statements_.get(index);
  }
  /**
   * <pre>
   * Required. The list of statements to execute in this batch. Statements are executed
   * serially, such that the effects of statement `i` are visible to statement
   * `i+1`. Each statement must be a DML statement. Execution stops at the
   * first failed statement; the remaining statements are not executed.
   * Callers must provide at least one statement.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder getStatementsOrBuilder(
      int index) {
    return statements_.get(index);
  }

  public static final int SEQNO_FIELD_NUMBER = 4;
  private long seqno_ = 0L;
  /**
   * <pre>
   * Required. A per-transaction sequence number used to identify this request. This field
   * makes each request idempotent such that if the request is received multiple
   * times, at most one will succeed.
   * The sequence number must be monotonically increasing within the
   * transaction. If a request arrives for the first time with an out-of-order
   * sequence number, the transaction may be aborted. Replays of previously
   * handled requests will yield the same response as the first execution.
   * </pre>
   *
   * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The seqno.
   */
  @java.lang.Override
  public long getSeqno() {
    return seqno_;
  }

  public static final int REQUEST_OPTIONS_FIELD_NUMBER = 5;
  private com.google.spanner.v1.RequestOptions requestOptions_;
  /**
   * <pre>
   * Common options for this request.
   * </pre>
   *
   * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
   * @return Whether the requestOptions field is set.
   */
  @java.lang.Override
  public boolean hasRequestOptions() {
    return requestOptions_ != null;
  }
  /**
   * <pre>
   * Common options for this request.
   * </pre>
   *
   * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
   * @return The requestOptions.
   */
  @java.lang.Override
  public com.google.spanner.v1.RequestOptions getRequestOptions() {
    return requestOptions_ == null ? com.google.spanner.v1.RequestOptions.getDefaultInstance() : requestOptions_;
  }
  /**
   * <pre>
   * Common options for this request.
   * </pre>
   *
   * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
   */
  @java.lang.Override
  public com.google.spanner.v1.RequestOptionsOrBuilder getRequestOptionsOrBuilder() {
    return requestOptions_ == null ? com.google.spanner.v1.RequestOptions.getDefaultInstance() : requestOptions_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(session_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, session_);
    }
    if (transaction_ != null) {
      output.writeMessage(2, getTransaction());
    }
    for (int i = 0; i < statements_.size(); i++) {
      output.writeMessage(3, statements_.get(i));
    }
    if (seqno_ != 0L) {
      output.writeInt64(4, seqno_);
    }
    if (requestOptions_ != null) {
      output.writeMessage(5, getRequestOptions());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(session_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, session_);
    }
    if (transaction_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTransaction());
    }
    for (int i = 0; i < statements_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, statements_.get(i));
    }
    if (seqno_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, seqno_);
    }
    if (requestOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getRequestOptions());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.spanner.v1.ExecuteBatchDmlRequest)) {
      return super.equals(obj);
    }
    com.google.spanner.v1.ExecuteBatchDmlRequest other = (com.google.spanner.v1.ExecuteBatchDmlRequest) obj;

    if (!getSession()
        .equals(other.getSession())) return false;
    if (hasTransaction() != other.hasTransaction()) return false;
    if (hasTransaction()) {
      if (!getTransaction()
          .equals(other.getTransaction())) return false;
    }
    if (!getStatementsList()
        .equals(other.getStatementsList())) return false;
    if (getSeqno()
        != other.getSeqno()) return false;
    if (hasRequestOptions() != other.hasRequestOptions()) return false;
    if (hasRequestOptions()) {
      if (!getRequestOptions()
          .equals(other.getRequestOptions())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SESSION_FIELD_NUMBER;
    hash = (53 * hash) + getSession().hashCode();
    if (hasTransaction()) {
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
    }
    if (getStatementsCount() > 0) {
      hash = (37 * hash) + STATEMENTS_FIELD_NUMBER;
      hash = (53 * hash) + getStatementsList().hashCode();
    }
    hash = (37 * hash) + SEQNO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getSeqno());
    if (hasRequestOptions()) {
      hash = (37 * hash) + REQUEST_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getRequestOptions().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.spanner.v1.ExecuteBatchDmlRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.spanner.v1.ExecuteBatchDmlRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request for [ExecuteBatchDml][google.spanner.v1.Spanner.ExecuteBatchDml].
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.ExecuteBatchDmlRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.ExecuteBatchDmlRequest)
      com.google.spanner.v1.ExecuteBatchDmlRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.spanner.v1.ExecuteBatchDmlRequest.class, com.google.spanner.v1.ExecuteBatchDmlRequest.Builder.class);
    }

    // Construct using com.google.spanner.v1.ExecuteBatchDmlRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      session_ = "";
      transaction_ = null;
      if (transactionBuilder_ != null) {
        transactionBuilder_.dispose();
        transactionBuilder_ = null;
      }
      if (statementsBuilder_ == null) {
        statements_ = java.util.Collections.emptyList();
      } else {
        statements_ = null;
        statementsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      seqno_ = 0L;
      requestOptions_ = null;
      if (requestOptionsBuilder_ != null) {
        requestOptionsBuilder_.dispose();
        requestOptionsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.spanner.v1.SpannerProto.internal_static_google_spanner_v1_ExecuteBatchDmlRequest_descriptor;
    }

    @java.lang.Override
    public com.google.spanner.v1.ExecuteBatchDmlRequest getDefaultInstanceForType() {
      return com.google.spanner.v1.ExecuteBatchDmlRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.spanner.v1.ExecuteBatchDmlRequest build() {
      com.google.spanner.v1.ExecuteBatchDmlRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.spanner.v1.ExecuteBatchDmlRequest buildPartial() {
      com.google.spanner.v1.ExecuteBatchDmlRequest result = new com.google.spanner.v1.ExecuteBatchDmlRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.spanner.v1.ExecuteBatchDmlRequest result) {
      if (statementsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          statements_ = java.util.Collections.unmodifiableList(statements_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.statements_ = statements_;
      } else {
        result.statements_ = statementsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.spanner.v1.ExecuteBatchDmlRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.session_ = session_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.transaction_ = transactionBuilder_ == null
            ? transaction_
            : transactionBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.seqno_ = seqno_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.requestOptions_ = requestOptionsBuilder_ == null
            ? requestOptions_
            : requestOptionsBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.spanner.v1.ExecuteBatchDmlRequest) {
        return mergeFrom((com.google.spanner.v1.ExecuteBatchDmlRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.spanner.v1.ExecuteBatchDmlRequest other) {
      if (other == com.google.spanner.v1.ExecuteBatchDmlRequest.getDefaultInstance()) return this;
      if (!other.getSession().isEmpty()) {
        session_ = other.session_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasTransaction()) {
        mergeTransaction(other.getTransaction());
      }
      if (statementsBuilder_ == null) {
        if (!other.statements_.isEmpty()) {
          if (statements_.isEmpty()) {
            statements_ = other.statements_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStatementsIsMutable();
            statements_.addAll(other.statements_);
          }
          onChanged();
        }
      } else {
        if (!other.statements_.isEmpty()) {
          if (statementsBuilder_.isEmpty()) {
            statementsBuilder_.dispose();
            statementsBuilder_ = null;
            statements_ = other.statements_;
            bitField0_ = (bitField0_ & ~0x00000004);
            statementsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStatementsFieldBuilder() : null;
          } else {
            statementsBuilder_.addAllMessages(other.statements_);
          }
        }
      }
      if (other.getSeqno() != 0L) {
        setSeqno(other.getSeqno());
      }
      if (other.hasRequestOptions()) {
        mergeRequestOptions(other.getRequestOptions());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              session_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getTransactionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.google.spanner.v1.ExecuteBatchDmlRequest.Statement m =
                  input.readMessage(
                      com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.parser(),
                      extensionRegistry);
              if (statementsBuilder_ == null) {
                ensureStatementsIsMutable();
                statements_.add(m);
              } else {
                statementsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 32: {
              seqno_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              input.readMessage(
                  getRequestOptionsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object session_ = "";
    /**
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The session.
     */
    public java.lang.String getSession() {
      java.lang.Object ref = session_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        session_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return The bytes for session.
     */
    public com.google.protobuf.ByteString
        getSessionBytes() {
      java.lang.Object ref = session_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        session_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The session to set.
     * @return This builder for chaining.
     */
    public Builder setSession(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      session_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearSession() {
      session_ = getDefaultInstance().getSession();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The session in which the DML statements should be performed.
     * </pre>
     *
     * <code>string session = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     * @param value The bytes for session to set.
     * @return This builder for chaining.
     */
    public Builder setSessionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      session_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.spanner.v1.TransactionSelector transaction_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.TransactionSelector, com.google.spanner.v1.TransactionSelector.Builder, com.google.spanner.v1.TransactionSelectorOrBuilder> transactionBuilder_;
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the transaction field is set.
     */
    public boolean hasTransaction() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The transaction.
     */
    public com.google.spanner.v1.TransactionSelector getTransaction() {
      if (transactionBuilder_ == null) {
        return transaction_ == null ? com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
      } else {
        return transactionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTransaction(com.google.spanner.v1.TransactionSelector value) {
      if (transactionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transaction_ = value;
      } else {
        transactionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTransaction(
        com.google.spanner.v1.TransactionSelector.Builder builderForValue) {
      if (transactionBuilder_ == null) {
        transaction_ = builderForValue.build();
      } else {
        transactionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeTransaction(com.google.spanner.v1.TransactionSelector value) {
      if (transactionBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          transaction_ != null &&
          transaction_ != com.google.spanner.v1.TransactionSelector.getDefaultInstance()) {
          getTransactionBuilder().mergeFrom(value);
        } else {
          transaction_ = value;
        }
      } else {
        transactionBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearTransaction() {
      bitField0_ = (bitField0_ & ~0x00000002);
      transaction_ = null;
      if (transactionBuilder_ != null) {
        transactionBuilder_.dispose();
        transactionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.TransactionSelector.Builder getTransactionBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getTransactionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.TransactionSelectorOrBuilder getTransactionOrBuilder() {
      if (transactionBuilder_ != null) {
        return transactionBuilder_.getMessageOrBuilder();
      } else {
        return transaction_ == null ?
            com.google.spanner.v1.TransactionSelector.getDefaultInstance() : transaction_;
      }
    }
    /**
     * <pre>
     * Required. The transaction to use. Must be a read-write transaction.
     * To protect against replays, single-use transactions are not supported. The
     * caller must either supply an existing transaction ID or begin a new
     * transaction.
     * </pre>
     *
     * <code>.google.spanner.v1.TransactionSelector transaction = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.TransactionSelector, com.google.spanner.v1.TransactionSelector.Builder, com.google.spanner.v1.TransactionSelectorOrBuilder> 
        getTransactionFieldBuilder() {
      if (transactionBuilder_ == null) {
        transactionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.spanner.v1.TransactionSelector, com.google.spanner.v1.TransactionSelector.Builder, com.google.spanner.v1.TransactionSelectorOrBuilder>(
                getTransaction(),
                getParentForChildren(),
                isClean());
        transaction_ = null;
      }
      return transactionBuilder_;
    }

    private java.util.List<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement> statements_ =
      java.util.Collections.emptyList();
    private void ensureStatementsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        statements_ = new java.util.ArrayList<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement>(statements_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.spanner.v1.ExecuteBatchDmlRequest.Statement, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder, com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder> statementsBuilder_;

    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement> getStatementsList() {
      if (statementsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(statements_);
      } else {
        return statementsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getStatementsCount() {
      if (statementsBuilder_ == null) {
        return statements_.size();
      } else {
        return statementsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement getStatements(int index) {
      if (statementsBuilder_ == null) {
        return statements_.get(index);
      } else {
        return statementsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setStatements(
        int index, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement value) {
      if (statementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatementsIsMutable();
        statements_.set(index, value);
        onChanged();
      } else {
        statementsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setStatements(
        int index, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder builderForValue) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.set(index, builderForValue.build());
        onChanged();
      } else {
        statementsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addStatements(com.google.spanner.v1.ExecuteBatchDmlRequest.Statement value) {
      if (statementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatementsIsMutable();
        statements_.add(value);
        onChanged();
      } else {
        statementsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addStatements(
        int index, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement value) {
      if (statementsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatementsIsMutable();
        statements_.add(index, value);
        onChanged();
      } else {
        statementsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addStatements(
        com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder builderForValue) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.add(builderForValue.build());
        onChanged();
      } else {
        statementsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addStatements(
        int index, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder builderForValue) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.add(index, builderForValue.build());
        onChanged();
      } else {
        statementsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllStatements(
        java.lang.Iterable<? extends com.google.spanner.v1.ExecuteBatchDmlRequest.Statement> values) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, statements_);
        onChanged();
      } else {
        statementsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearStatements() {
      if (statementsBuilder_ == null) {
        statements_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        statementsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder removeStatements(int index) {
      if (statementsBuilder_ == null) {
        ensureStatementsIsMutable();
        statements_.remove(index);
        onChanged();
      } else {
        statementsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder getStatementsBuilder(
        int index) {
      return getStatementsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder getStatementsOrBuilder(
        int index) {
      if (statementsBuilder_ == null) {
        return statements_.get(index);  } else {
        return statementsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<? extends com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder> 
         getStatementsOrBuilderList() {
      if (statementsBuilder_ != null) {
        return statementsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(statements_);
      }
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder addStatementsBuilder() {
      return getStatementsFieldBuilder().addBuilder(
          com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.getDefaultInstance());
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder addStatementsBuilder(
        int index) {
      return getStatementsFieldBuilder().addBuilder(
          index, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.getDefaultInstance());
    }
    /**
     * <pre>
     * Required. The list of statements to execute in this batch. Statements are executed
     * serially, such that the effects of statement `i` are visible to statement
     * `i+1`. Each statement must be a DML statement. Execution stops at the
     * first failed statement; the remaining statements are not executed.
     * Callers must provide at least one statement.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.ExecuteBatchDmlRequest.Statement statements = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder> 
         getStatementsBuilderList() {
      return getStatementsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.spanner.v1.ExecuteBatchDmlRequest.Statement, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder, com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder> 
        getStatementsFieldBuilder() {
      if (statementsBuilder_ == null) {
        statementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.spanner.v1.ExecuteBatchDmlRequest.Statement, com.google.spanner.v1.ExecuteBatchDmlRequest.Statement.Builder, com.google.spanner.v1.ExecuteBatchDmlRequest.StatementOrBuilder>(
                statements_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        statements_ = null;
      }
      return statementsBuilder_;
    }

    private long seqno_ ;
    /**
     * <pre>
     * Required. A per-transaction sequence number used to identify this request. This field
     * makes each request idempotent such that if the request is received multiple
     * times, at most one will succeed.
     * The sequence number must be monotonically increasing within the
     * transaction. If a request arrives for the first time with an out-of-order
     * sequence number, the transaction may be aborted. Replays of previously
     * handled requests will yield the same response as the first execution.
     * </pre>
     *
     * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The seqno.
     */
    @java.lang.Override
    public long getSeqno() {
      return seqno_;
    }
    /**
     * <pre>
     * Required. A per-transaction sequence number used to identify this request. This field
     * makes each request idempotent such that if the request is received multiple
     * times, at most one will succeed.
     * The sequence number must be monotonically increasing within the
     * transaction. If a request arrives for the first time with an out-of-order
     * sequence number, the transaction may be aborted. Replays of previously
     * handled requests will yield the same response as the first execution.
     * </pre>
     *
     * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The seqno to set.
     * @return This builder for chaining.
     */
    public Builder setSeqno(long value) {
      
      seqno_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. A per-transaction sequence number used to identify this request. This field
     * makes each request idempotent such that if the request is received multiple
     * times, at most one will succeed.
     * The sequence number must be monotonically increasing within the
     * transaction. If a request arrives for the first time with an out-of-order
     * sequence number, the transaction may be aborted. Replays of previously
     * handled requests will yield the same response as the first execution.
     * </pre>
     *
     * <code>int64 seqno = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearSeqno() {
      bitField0_ = (bitField0_ & ~0x00000008);
      seqno_ = 0L;
      onChanged();
      return this;
    }

    private com.google.spanner.v1.RequestOptions requestOptions_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.RequestOptions, com.google.spanner.v1.RequestOptions.Builder, com.google.spanner.v1.RequestOptionsOrBuilder> requestOptionsBuilder_;
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     * @return Whether the requestOptions field is set.
     */
    public boolean hasRequestOptions() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     * @return The requestOptions.
     */
    public com.google.spanner.v1.RequestOptions getRequestOptions() {
      if (requestOptionsBuilder_ == null) {
        return requestOptions_ == null ? com.google.spanner.v1.RequestOptions.getDefaultInstance() : requestOptions_;
      } else {
        return requestOptionsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder setRequestOptions(com.google.spanner.v1.RequestOptions value) {
      if (requestOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requestOptions_ = value;
      } else {
        requestOptionsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder setRequestOptions(
        com.google.spanner.v1.RequestOptions.Builder builderForValue) {
      if (requestOptionsBuilder_ == null) {
        requestOptions_ = builderForValue.build();
      } else {
        requestOptionsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder mergeRequestOptions(com.google.spanner.v1.RequestOptions value) {
      if (requestOptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          requestOptions_ != null &&
          requestOptions_ != com.google.spanner.v1.RequestOptions.getDefaultInstance()) {
          getRequestOptionsBuilder().mergeFrom(value);
        } else {
          requestOptions_ = value;
        }
      } else {
        requestOptionsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public Builder clearRequestOptions() {
      bitField0_ = (bitField0_ & ~0x00000010);
      requestOptions_ = null;
      if (requestOptionsBuilder_ != null) {
        requestOptionsBuilder_.dispose();
        requestOptionsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public com.google.spanner.v1.RequestOptions.Builder getRequestOptionsBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getRequestOptionsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    public com.google.spanner.v1.RequestOptionsOrBuilder getRequestOptionsOrBuilder() {
      if (requestOptionsBuilder_ != null) {
        return requestOptionsBuilder_.getMessageOrBuilder();
      } else {
        return requestOptions_ == null ?
            com.google.spanner.v1.RequestOptions.getDefaultInstance() : requestOptions_;
      }
    }
    /**
     * <pre>
     * Common options for this request.
     * </pre>
     *
     * <code>.google.spanner.v1.RequestOptions request_options = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.spanner.v1.RequestOptions, com.google.spanner.v1.RequestOptions.Builder, com.google.spanner.v1.RequestOptionsOrBuilder> 
        getRequestOptionsFieldBuilder() {
      if (requestOptionsBuilder_ == null) {
        requestOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.spanner.v1.RequestOptions, com.google.spanner.v1.RequestOptions.Builder, com.google.spanner.v1.RequestOptionsOrBuilder>(
                getRequestOptions(),
                getParentForChildren(),
                isClean());
        requestOptions_ = null;
      }
      return requestOptionsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.spanner.v1.ExecuteBatchDmlRequest)
  }

  // @@protoc_insertion_point(class_scope:google.spanner.v1.ExecuteBatchDmlRequest)
  private static final com.google.spanner.v1.ExecuteBatchDmlRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.spanner.v1.ExecuteBatchDmlRequest();
  }

  public static com.google.spanner.v1.ExecuteBatchDmlRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExecuteBatchDmlRequest>
      PARSER = new com.google.protobuf.AbstractParser<ExecuteBatchDmlRequest>() {
    @java.lang.Override
    public ExecuteBatchDmlRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ExecuteBatchDmlRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ExecuteBatchDmlRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.spanner.v1.ExecuteBatchDmlRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

