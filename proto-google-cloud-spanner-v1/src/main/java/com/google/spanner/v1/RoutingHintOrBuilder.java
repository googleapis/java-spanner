/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/location.proto

// Protobuf Java Version: 3.25.7
package com.google.spanner.v1;

public interface RoutingHintOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.spanner.v1.RoutingHint)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * A session-scoped unique ID for the operation, computed client-side.
   * Requests with the same `operation_uid` should have a shared 'shape',
   * meaning that some fields are expected to be the same, such as the SQL
   * query, the target table/columns (for reads) etc. Requests with the same
   * `operation_uid` are meant to differ only in fields like keys/key
   * ranges/query parameters, transaction IDs, etc.
   *
   * `operation_uid` must be non-zero for `RoutingHint` to be valid.
   * </pre>
   *
   * <code>uint64 operation_uid = 1;</code>
   *
   * @return The operationUid.
   */
  long getOperationUid();

  /**
   *
   *
   * <pre>
   * The database ID of the database being accessed, see
   * `CacheUpdate.database_id`. Should match the cache entries that were used
   * to generate the rest of the fields in this `RoutingHint`.
   * </pre>
   *
   * <code>uint64 database_id = 2;</code>
   *
   * @return The databaseId.
   */
  long getDatabaseId();

  /**
   *
   *
   * <pre>
   * The schema generation of the recipe that was used to generate `key` and
   * `limit_key`. See also `RecipeList.schema_generation`.
   * </pre>
   *
   * <code>bytes schema_generation = 3;</code>
   *
   * @return The schemaGeneration.
   */
  com.google.protobuf.ByteString getSchemaGeneration();

  /**
   *
   *
   * <pre>
   * The key / key range that this request accesses. For operations that
   * access a single key, `key` should be set and `limit_key` should be empty.
   * For operations that access a key range, `key` and `limit_key` should both
   * be set, to the inclusive start and exclusive end of the range respectively.
   *
   * The keys are encoded in "sortable string format" (ssformat), using a
   * `KeyRecipe` that is appropriate for the request. See `KeyRecipe` for more
   * details.
   * </pre>
   *
   * <code>bytes key = 4;</code>
   *
   * @return The key.
   */
  com.google.protobuf.ByteString getKey();

  /**
   *
   *
   * <pre>
   * If this request targets a key range, this is the exclusive end of the
   * range. See `key` for more details.
   * </pre>
   *
   * <code>bytes limit_key = 5;</code>
   *
   * @return The limitKey.
   */
  com.google.protobuf.ByteString getLimitKey();

  /**
   *
   *
   * <pre>
   * The group UID of the group that the client believes serves the range
   * defined by `key` and `limit_key`. See `Range.group_uid` for more details.
   * </pre>
   *
   * <code>uint64 group_uid = 6;</code>
   *
   * @return The groupUid.
   */
  long getGroupUid();

  /**
   *
   *
   * <pre>
   * The split ID of the split that the client believes contains the range
   * defined by `key` and `limit_key`. See `Range.split_id` for more details.
   * </pre>
   *
   * <code>uint64 split_id = 7;</code>
   *
   * @return The splitId.
   */
  long getSplitId();

  /**
   *
   *
   * <pre>
   * The tablet UID of the tablet from group `group_uid` that the client
   * believes is best to serve this request. See `Group.local_tablet_uids` and
   * `Group.leader_tablet_uid`.
   * </pre>
   *
   * <code>uint64 tablet_uid = 8;</code>
   *
   * @return The tabletUid.
   */
  long getTabletUid();

  /**
   *
   *
   * <pre>
   * If the client had multiple options for tablet selection, and some of its
   * first choices were unhealthy (e.g., the server is unreachable, or
   * `Tablet.skip` is true), this field will contain the tablet UIDs of those
   * tablets, with their incarnations. The server may include a `CacheUpdate`
   * with new locations for those tablets.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.RoutingHint.SkippedTablet skipped_tablet_uid = 9;</code>
   */
  java.util.List<com.google.spanner.v1.RoutingHint.SkippedTablet> getSkippedTabletUidList();
  /**
   *
   *
   * <pre>
   * If the client had multiple options for tablet selection, and some of its
   * first choices were unhealthy (e.g., the server is unreachable, or
   * `Tablet.skip` is true), this field will contain the tablet UIDs of those
   * tablets, with their incarnations. The server may include a `CacheUpdate`
   * with new locations for those tablets.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.RoutingHint.SkippedTablet skipped_tablet_uid = 9;</code>
   */
  com.google.spanner.v1.RoutingHint.SkippedTablet getSkippedTabletUid(int index);
  /**
   *
   *
   * <pre>
   * If the client had multiple options for tablet selection, and some of its
   * first choices were unhealthy (e.g., the server is unreachable, or
   * `Tablet.skip` is true), this field will contain the tablet UIDs of those
   * tablets, with their incarnations. The server may include a `CacheUpdate`
   * with new locations for those tablets.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.RoutingHint.SkippedTablet skipped_tablet_uid = 9;</code>
   */
  int getSkippedTabletUidCount();
  /**
   *
   *
   * <pre>
   * If the client had multiple options for tablet selection, and some of its
   * first choices were unhealthy (e.g., the server is unreachable, or
   * `Tablet.skip` is true), this field will contain the tablet UIDs of those
   * tablets, with their incarnations. The server may include a `CacheUpdate`
   * with new locations for those tablets.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.RoutingHint.SkippedTablet skipped_tablet_uid = 9;</code>
   */
  java.util.List<? extends com.google.spanner.v1.RoutingHint.SkippedTabletOrBuilder>
      getSkippedTabletUidOrBuilderList();
  /**
   *
   *
   * <pre>
   * If the client had multiple options for tablet selection, and some of its
   * first choices were unhealthy (e.g., the server is unreachable, or
   * `Tablet.skip` is true), this field will contain the tablet UIDs of those
   * tablets, with their incarnations. The server may include a `CacheUpdate`
   * with new locations for those tablets.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.RoutingHint.SkippedTablet skipped_tablet_uid = 9;</code>
   */
  com.google.spanner.v1.RoutingHint.SkippedTabletOrBuilder getSkippedTabletUidOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * If present, the client's current location. In the Spanner managed service,
   * this should be the name of a Google Cloud zone or region, such as
   * "us-central1". In Spanner Omni, this should correspond to a previously
   * created location.
   *
   * If absent, the client's location will be assumed to be the same as the
   * location of the server the client ends up connected to.
   *
   * Locations are primarily valuable for clients that connect from regions
   * other than the ones that contain the Spanner database.
   * </pre>
   *
   * <code>string client_location = 10;</code>
   *
   * @return The clientLocation.
   */
  java.lang.String getClientLocation();
  /**
   *
   *
   * <pre>
   * If present, the client's current location. In the Spanner managed service,
   * this should be the name of a Google Cloud zone or region, such as
   * "us-central1". In Spanner Omni, this should correspond to a previously
   * created location.
   *
   * If absent, the client's location will be assumed to be the same as the
   * location of the server the client ends up connected to.
   *
   * Locations are primarily valuable for clients that connect from regions
   * other than the ones that contain the Spanner database.
   * </pre>
   *
   * <code>string client_location = 10;</code>
   *
   * @return The bytes for clientLocation.
   */
  com.google.protobuf.ByteString getClientLocationBytes();
}
