/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/location.proto

// Protobuf Java Version: 3.25.8
package com.google.spanner.v1;

public interface RangeOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.spanner.v1.Range)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The start key of the range, inclusive. Encoded in "sortable string format"
   * (ssformat).
   * </pre>
   *
   * <code>bytes start_key = 1;</code>
   *
   * @return The startKey.
   */
  com.google.protobuf.ByteString getStartKey();

  /**
   *
   *
   * <pre>
   * The limit key of the range, exclusive. Encoded in "sortable string format"
   * (ssformat).
   * </pre>
   *
   * <code>bytes limit_key = 2;</code>
   *
   * @return The limitKey.
   */
  com.google.protobuf.ByteString getLimitKey();

  /**
   *
   *
   * <pre>
   * The UID of the paxos group where this range is stored. UIDs are unique
   * within the database. References `Group.group_uid`.
   * </pre>
   *
   * <code>uint64 group_uid = 3;</code>
   *
   * @return The groupUid.
   */
  long getGroupUid();

  /**
   *
   *
   * <pre>
   * A group can store multiple ranges of keys. Each key range is named by an
   * ID (the split ID). Within a group, split IDs are unique. The `split_id`
   * names the exact split in `group_uid` where this range is stored.
   * </pre>
   *
   * <code>uint64 split_id = 4;</code>
   *
   * @return The splitId.
   */
  long getSplitId();

  /**
   *
   *
   * <pre>
   * `generation` indicates the freshness of the range information contained
   * in this proto. Generations can be compared lexicographically; if generation
   * A is greater than generation B, then the `Range` corresponding to A is
   * newer than the `Range` corresponding to B, and should be used
   * preferentially.
   * </pre>
   *
   * <code>bytes generation = 5;</code>
   *
   * @return The generation.
   */
  com.google.protobuf.ByteString getGeneration();
}
