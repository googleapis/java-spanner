/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/keys.proto

package com.google.spanner.v1;

/**
 *
 *
 * <pre>
 * `KeySet` defines a collection of Cloud Spanner keys and/or key ranges. All
 * the keys are expected to be in the same table or index. The keys need
 * not be sorted in any particular way.
 * If the same key is specified multiple times in the set (for example
 * if two ranges, two keys, or a key and a range overlap), Cloud Spanner
 * behaves as if the key were only specified once.
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.KeySet}
 */
public final class KeySet extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.KeySet)
    KeySetOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use KeySet.newBuilder() to construct.
  private KeySet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private KeySet() {
    keys_ = java.util.Collections.emptyList();
    ranges_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(UnusedPrivateParameter unused) {
    return new KeySet();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private KeySet(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                keys_ = new java.util.ArrayList<com.google.protobuf.ListValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              keys_.add(
                  input.readMessage(com.google.protobuf.ListValue.parser(), extensionRegistry));
              break;
            }
          case 18:
            {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                ranges_ = new java.util.ArrayList<KeyRange>();
                mutable_bitField0_ |= 0x00000002;
              }
              ranges_.add(input.readMessage(KeyRange.parser(), extensionRegistry));
              break;
            }
          case 24:
            {
              all_ = input.readBool();
              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        keys_ = java.util.Collections.unmodifiableList(keys_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        ranges_ = java.util.Collections.unmodifiableList(ranges_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return KeysProto.internal_static_google_spanner_v1_KeySet_descriptor;
  }

  @Override
  protected FieldAccessorTable internalGetFieldAccessorTable() {
    return KeysProto.internal_static_google_spanner_v1_KeySet_fieldAccessorTable
        .ensureFieldAccessorsInitialized(KeySet.class, Builder.class);
  }

  public static final int KEYS_FIELD_NUMBER = 1;
  private java.util.List<com.google.protobuf.ListValue> keys_;
  /**
   *
   *
   * <pre>
   * A list of specific keys. Entries in `keys` should have exactly as
   * many elements as there are columns in the primary or index key
   * with which this `KeySet` is used.  Individual key values are
   * encoded as described [here][google.spanner.v1.TypeCode].
   * </pre>
   *
   * <code>repeated .google.protobuf.ListValue keys = 1;</code>
   */
  @Override
  public java.util.List<com.google.protobuf.ListValue> getKeysList() {
    return keys_;
  }
  /**
   *
   *
   * <pre>
   * A list of specific keys. Entries in `keys` should have exactly as
   * many elements as there are columns in the primary or index key
   * with which this `KeySet` is used.  Individual key values are
   * encoded as described [here][google.spanner.v1.TypeCode].
   * </pre>
   *
   * <code>repeated .google.protobuf.ListValue keys = 1;</code>
   */
  @Override
  public java.util.List<? extends com.google.protobuf.ListValueOrBuilder> getKeysOrBuilderList() {
    return keys_;
  }
  /**
   *
   *
   * <pre>
   * A list of specific keys. Entries in `keys` should have exactly as
   * many elements as there are columns in the primary or index key
   * with which this `KeySet` is used.  Individual key values are
   * encoded as described [here][google.spanner.v1.TypeCode].
   * </pre>
   *
   * <code>repeated .google.protobuf.ListValue keys = 1;</code>
   */
  @Override
  public int getKeysCount() {
    return keys_.size();
  }
  /**
   *
   *
   * <pre>
   * A list of specific keys. Entries in `keys` should have exactly as
   * many elements as there are columns in the primary or index key
   * with which this `KeySet` is used.  Individual key values are
   * encoded as described [here][google.spanner.v1.TypeCode].
   * </pre>
   *
   * <code>repeated .google.protobuf.ListValue keys = 1;</code>
   */
  @Override
  public com.google.protobuf.ListValue getKeys(int index) {
    return keys_.get(index);
  }
  /**
   *
   *
   * <pre>
   * A list of specific keys. Entries in `keys` should have exactly as
   * many elements as there are columns in the primary or index key
   * with which this `KeySet` is used.  Individual key values are
   * encoded as described [here][google.spanner.v1.TypeCode].
   * </pre>
   *
   * <code>repeated .google.protobuf.ListValue keys = 1;</code>
   */
  @Override
  public com.google.protobuf.ListValueOrBuilder getKeysOrBuilder(int index) {
    return keys_.get(index);
  }

  public static final int RANGES_FIELD_NUMBER = 2;
  private java.util.List<KeyRange> ranges_;
  /**
   *
   *
   * <pre>
   * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
   * key range specifications.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
   */
  @Override
  public java.util.List<KeyRange> getRangesList() {
    return ranges_;
  }
  /**
   *
   *
   * <pre>
   * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
   * key range specifications.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
   */
  @Override
  public java.util.List<? extends KeyRangeOrBuilder> getRangesOrBuilderList() {
    return ranges_;
  }
  /**
   *
   *
   * <pre>
   * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
   * key range specifications.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
   */
  @Override
  public int getRangesCount() {
    return ranges_.size();
  }
  /**
   *
   *
   * <pre>
   * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
   * key range specifications.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
   */
  @Override
  public KeyRange getRanges(int index) {
    return ranges_.get(index);
  }
  /**
   *
   *
   * <pre>
   * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
   * key range specifications.
   * </pre>
   *
   * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
   */
  @Override
  public KeyRangeOrBuilder getRangesOrBuilder(int index) {
    return ranges_.get(index);
  }

  public static final int ALL_FIELD_NUMBER = 3;
  private boolean all_;
  /**
   *
   *
   * <pre>
   * For convenience `all` can be set to `true` to indicate that this
   * `KeySet` matches all keys in the table or index. Note that any keys
   * specified in `keys` or `ranges` are only yielded once.
   * </pre>
   *
   * <code>bool all = 3;</code>
   *
   * @return The all.
   */
  @Override
  public boolean getAll() {
    return all_;
  }

  private byte memoizedIsInitialized = -1;

  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    for (int i = 0; i < keys_.size(); i++) {
      output.writeMessage(1, keys_.get(i));
    }
    for (int i = 0; i < ranges_.size(); i++) {
      output.writeMessage(2, ranges_.get(i));
    }
    if (all_ != false) {
      output.writeBool(3, all_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < keys_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, keys_.get(i));
    }
    for (int i = 0; i < ranges_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, ranges_.get(i));
    }
    if (all_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(3, all_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof KeySet)) {
      return super.equals(obj);
    }
    KeySet other = (KeySet) obj;

    if (!getKeysList().equals(other.getKeysList())) return false;
    if (!getRangesList().equals(other.getRangesList())) return false;
    if (getAll() != other.getAll()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getKeysCount() > 0) {
      hash = (37 * hash) + KEYS_FIELD_NUMBER;
      hash = (53 * hash) + getKeysList().hashCode();
    }
    if (getRangesCount() > 0) {
      hash = (37 * hash) + RANGES_FIELD_NUMBER;
      hash = (53 * hash) + getRangesList().hashCode();
    }
    hash = (37 * hash) + ALL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getAll());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static KeySet parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static KeySet parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static KeySet parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static KeySet parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static KeySet parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static KeySet parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static KeySet parseFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static KeySet parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static KeySet parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static KeySet parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static KeySet parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static KeySet parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(KeySet prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * `KeySet` defines a collection of Cloud Spanner keys and/or key ranges. All
   * the keys are expected to be in the same table or index. The keys need
   * not be sorted in any particular way.
   * If the same key is specified multiple times in the set (for example
   * if two ranges, two keys, or a key and a range overlap), Cloud Spanner
   * behaves as if the key were only specified once.
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.KeySet}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.KeySet)
      KeySetOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return KeysProto.internal_static_google_spanner_v1_KeySet_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return KeysProto.internal_static_google_spanner_v1_KeySet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(KeySet.class, Builder.class);
    }

    // Construct using com.google.spanner.v1.KeySet.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
        getKeysFieldBuilder();
        getRangesFieldBuilder();
      }
    }

    @Override
    public Builder clear() {
      super.clear();
      if (keysBuilder_ == null) {
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        keysBuilder_.clear();
      }
      if (rangesBuilder_ == null) {
        ranges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        rangesBuilder_.clear();
      }
      all_ = false;

      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return KeysProto.internal_static_google_spanner_v1_KeySet_descriptor;
    }

    @Override
    public KeySet getDefaultInstanceForType() {
      return KeySet.getDefaultInstance();
    }

    @Override
    public KeySet build() {
      KeySet result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public KeySet buildPartial() {
      KeySet result = new KeySet(this);
      int from_bitField0_ = bitField0_;
      if (keysBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.keys_ = keys_;
      } else {
        result.keys_ = keysBuilder_.build();
      }
      if (rangesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          ranges_ = java.util.Collections.unmodifiableList(ranges_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.ranges_ = ranges_;
      } else {
        result.ranges_ = rangesBuilder_.build();
      }
      result.all_ = all_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }

    @Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.setField(field, value);
    }

    @Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.addRepeatedField(field, value);
    }

    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof KeySet) {
        return mergeFrom((KeySet) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(KeySet other) {
      if (other == KeySet.getDefaultInstance()) return this;
      if (keysBuilder_ == null) {
        if (!other.keys_.isEmpty()) {
          if (keys_.isEmpty()) {
            keys_ = other.keys_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureKeysIsMutable();
            keys_.addAll(other.keys_);
          }
          onChanged();
        }
      } else {
        if (!other.keys_.isEmpty()) {
          if (keysBuilder_.isEmpty()) {
            keysBuilder_.dispose();
            keysBuilder_ = null;
            keys_ = other.keys_;
            bitField0_ = (bitField0_ & ~0x00000001);
            keysBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getKeysFieldBuilder()
                    : null;
          } else {
            keysBuilder_.addAllMessages(other.keys_);
          }
        }
      }
      if (rangesBuilder_ == null) {
        if (!other.ranges_.isEmpty()) {
          if (ranges_.isEmpty()) {
            ranges_ = other.ranges_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRangesIsMutable();
            ranges_.addAll(other.ranges_);
          }
          onChanged();
        }
      } else {
        if (!other.ranges_.isEmpty()) {
          if (rangesBuilder_.isEmpty()) {
            rangesBuilder_.dispose();
            rangesBuilder_ = null;
            ranges_ = other.ranges_;
            bitField0_ = (bitField0_ & ~0x00000002);
            rangesBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getRangesFieldBuilder()
                    : null;
          } else {
            rangesBuilder_.addAllMessages(other.ranges_);
          }
        }
      }
      if (other.getAll() != false) {
        setAll(other.getAll());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      KeySet parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (KeySet) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int bitField0_;

    private java.util.List<com.google.protobuf.ListValue> keys_ = java.util.Collections.emptyList();

    private void ensureKeysIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        keys_ = new java.util.ArrayList<com.google.protobuf.ListValue>(keys_);
        bitField0_ |= 0x00000001;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.protobuf.ListValue,
            com.google.protobuf.ListValue.Builder,
            com.google.protobuf.ListValueOrBuilder>
        keysBuilder_;

    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public java.util.List<com.google.protobuf.ListValue> getKeysList() {
      if (keysBuilder_ == null) {
        return java.util.Collections.unmodifiableList(keys_);
      } else {
        return keysBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public int getKeysCount() {
      if (keysBuilder_ == null) {
        return keys_.size();
      } else {
        return keysBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public com.google.protobuf.ListValue getKeys(int index) {
      if (keysBuilder_ == null) {
        return keys_.get(index);
      } else {
        return keysBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder setKeys(int index, com.google.protobuf.ListValue value) {
      if (keysBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKeysIsMutable();
        keys_.set(index, value);
        onChanged();
      } else {
        keysBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder setKeys(int index, com.google.protobuf.ListValue.Builder builderForValue) {
      if (keysBuilder_ == null) {
        ensureKeysIsMutable();
        keys_.set(index, builderForValue.build());
        onChanged();
      } else {
        keysBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder addKeys(com.google.protobuf.ListValue value) {
      if (keysBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKeysIsMutable();
        keys_.add(value);
        onChanged();
      } else {
        keysBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder addKeys(int index, com.google.protobuf.ListValue value) {
      if (keysBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKeysIsMutable();
        keys_.add(index, value);
        onChanged();
      } else {
        keysBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder addKeys(com.google.protobuf.ListValue.Builder builderForValue) {
      if (keysBuilder_ == null) {
        ensureKeysIsMutable();
        keys_.add(builderForValue.build());
        onChanged();
      } else {
        keysBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder addKeys(int index, com.google.protobuf.ListValue.Builder builderForValue) {
      if (keysBuilder_ == null) {
        ensureKeysIsMutable();
        keys_.add(index, builderForValue.build());
        onChanged();
      } else {
        keysBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder addAllKeys(Iterable<? extends com.google.protobuf.ListValue> values) {
      if (keysBuilder_ == null) {
        ensureKeysIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, keys_);
        onChanged();
      } else {
        keysBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder clearKeys() {
      if (keysBuilder_ == null) {
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        keysBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public Builder removeKeys(int index) {
      if (keysBuilder_ == null) {
        ensureKeysIsMutable();
        keys_.remove(index);
        onChanged();
      } else {
        keysBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public com.google.protobuf.ListValue.Builder getKeysBuilder(int index) {
      return getKeysFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public com.google.protobuf.ListValueOrBuilder getKeysOrBuilder(int index) {
      if (keysBuilder_ == null) {
        return keys_.get(index);
      } else {
        return keysBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public java.util.List<? extends com.google.protobuf.ListValueOrBuilder> getKeysOrBuilderList() {
      if (keysBuilder_ != null) {
        return keysBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(keys_);
      }
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public com.google.protobuf.ListValue.Builder addKeysBuilder() {
      return getKeysFieldBuilder().addBuilder(com.google.protobuf.ListValue.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public com.google.protobuf.ListValue.Builder addKeysBuilder(int index) {
      return getKeysFieldBuilder()
          .addBuilder(index, com.google.protobuf.ListValue.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * A list of specific keys. Entries in `keys` should have exactly as
     * many elements as there are columns in the primary or index key
     * with which this `KeySet` is used.  Individual key values are
     * encoded as described [here][google.spanner.v1.TypeCode].
     * </pre>
     *
     * <code>repeated .google.protobuf.ListValue keys = 1;</code>
     */
    public java.util.List<com.google.protobuf.ListValue.Builder> getKeysBuilderList() {
      return getKeysFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.protobuf.ListValue,
            com.google.protobuf.ListValue.Builder,
            com.google.protobuf.ListValueOrBuilder>
        getKeysFieldBuilder() {
      if (keysBuilder_ == null) {
        keysBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.protobuf.ListValue,
                com.google.protobuf.ListValue.Builder,
                com.google.protobuf.ListValueOrBuilder>(
                keys_, ((bitField0_ & 0x00000001) != 0), getParentForChildren(), isClean());
        keys_ = null;
      }
      return keysBuilder_;
    }

    private java.util.List<KeyRange> ranges_ = java.util.Collections.emptyList();

    private void ensureRangesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        ranges_ = new java.util.ArrayList<KeyRange>(ranges_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            KeyRange, KeyRange.Builder, KeyRangeOrBuilder>
        rangesBuilder_;

    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public java.util.List<KeyRange> getRangesList() {
      if (rangesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(ranges_);
      } else {
        return rangesBuilder_.getMessageList();
      }
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public int getRangesCount() {
      if (rangesBuilder_ == null) {
        return ranges_.size();
      } else {
        return rangesBuilder_.getCount();
      }
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public KeyRange getRanges(int index) {
      if (rangesBuilder_ == null) {
        return ranges_.get(index);
      } else {
        return rangesBuilder_.getMessage(index);
      }
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder setRanges(int index, KeyRange value) {
      if (rangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRangesIsMutable();
        ranges_.set(index, value);
        onChanged();
      } else {
        rangesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder setRanges(int index, KeyRange.Builder builderForValue) {
      if (rangesBuilder_ == null) {
        ensureRangesIsMutable();
        ranges_.set(index, builderForValue.build());
        onChanged();
      } else {
        rangesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder addRanges(KeyRange value) {
      if (rangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRangesIsMutable();
        ranges_.add(value);
        onChanged();
      } else {
        rangesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder addRanges(int index, KeyRange value) {
      if (rangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRangesIsMutable();
        ranges_.add(index, value);
        onChanged();
      } else {
        rangesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder addRanges(KeyRange.Builder builderForValue) {
      if (rangesBuilder_ == null) {
        ensureRangesIsMutable();
        ranges_.add(builderForValue.build());
        onChanged();
      } else {
        rangesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder addRanges(int index, KeyRange.Builder builderForValue) {
      if (rangesBuilder_ == null) {
        ensureRangesIsMutable();
        ranges_.add(index, builderForValue.build());
        onChanged();
      } else {
        rangesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder addAllRanges(Iterable<? extends KeyRange> values) {
      if (rangesBuilder_ == null) {
        ensureRangesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, ranges_);
        onChanged();
      } else {
        rangesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder clearRanges() {
      if (rangesBuilder_ == null) {
        ranges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        rangesBuilder_.clear();
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public Builder removeRanges(int index) {
      if (rangesBuilder_ == null) {
        ensureRangesIsMutable();
        ranges_.remove(index);
        onChanged();
      } else {
        rangesBuilder_.remove(index);
      }
      return this;
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public KeyRange.Builder getRangesBuilder(int index) {
      return getRangesFieldBuilder().getBuilder(index);
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public KeyRangeOrBuilder getRangesOrBuilder(int index) {
      if (rangesBuilder_ == null) {
        return ranges_.get(index);
      } else {
        return rangesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public java.util.List<? extends KeyRangeOrBuilder> getRangesOrBuilderList() {
      if (rangesBuilder_ != null) {
        return rangesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(ranges_);
      }
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public KeyRange.Builder addRangesBuilder() {
      return getRangesFieldBuilder().addBuilder(KeyRange.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public KeyRange.Builder addRangesBuilder(int index) {
      return getRangesFieldBuilder().addBuilder(index, KeyRange.getDefaultInstance());
    }
    /**
     *
     *
     * <pre>
     * A list of key ranges. See [KeyRange][google.spanner.v1.KeyRange] for more information about
     * key range specifications.
     * </pre>
     *
     * <code>repeated .google.spanner.v1.KeyRange ranges = 2;</code>
     */
    public java.util.List<KeyRange.Builder> getRangesBuilderList() {
      return getRangesFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            KeyRange, KeyRange.Builder, KeyRangeOrBuilder>
        getRangesFieldBuilder() {
      if (rangesBuilder_ == null) {
        rangesBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                KeyRange, KeyRange.Builder, KeyRangeOrBuilder>(
                ranges_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(), isClean());
        ranges_ = null;
      }
      return rangesBuilder_;
    }

    private boolean all_;
    /**
     *
     *
     * <pre>
     * For convenience `all` can be set to `true` to indicate that this
     * `KeySet` matches all keys in the table or index. Note that any keys
     * specified in `keys` or `ranges` are only yielded once.
     * </pre>
     *
     * <code>bool all = 3;</code>
     *
     * @return The all.
     */
    @Override
    public boolean getAll() {
      return all_;
    }
    /**
     *
     *
     * <pre>
     * For convenience `all` can be set to `true` to indicate that this
     * `KeySet` matches all keys in the table or index. Note that any keys
     * specified in `keys` or `ranges` are only yielded once.
     * </pre>
     *
     * <code>bool all = 3;</code>
     *
     * @param value The all to set.
     * @return This builder for chaining.
     */
    public Builder setAll(boolean value) {

      all_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * For convenience `all` can be set to `true` to indicate that this
     * `KeySet` matches all keys in the table or index. Note that any keys
     * specified in `keys` or `ranges` are only yielded once.
     * </pre>
     *
     * <code>bool all = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAll() {

      all_ = false;
      onChanged();
      return this;
    }

    @Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.spanner.v1.KeySet)
  }

  // @@protoc_insertion_point(class_scope:google.spanner.v1.KeySet)
  private static final KeySet DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new KeySet();
  }

  public static KeySet getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KeySet> PARSER =
      new com.google.protobuf.AbstractParser<KeySet>() {
        @Override
        public KeySet parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new KeySet(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<KeySet> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<KeySet> getParserForType() {
    return PARSER;
  }

  @Override
  public KeySet getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
