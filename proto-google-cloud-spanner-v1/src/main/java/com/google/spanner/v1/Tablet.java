/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/location.proto

// Protobuf Java Version: 3.25.8
package com.google.spanner.v1;

/**
 *
 *
 * <pre>
 * A `Tablet` represents a single replica of a `Group`. A tablet is served by a
 * single server at a time, and can move between servers due to server death or
 * simply load balancing.
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.Tablet}
 */
public final class Tablet extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.Tablet)
    TabletOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use Tablet.newBuilder() to construct.
  private Tablet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Tablet() {
    serverAddress_ = "";
    location_ = "";
    role_ = 0;
    incarnation_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new Tablet();
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.spanner.v1.LocationProto.internal_static_google_spanner_v1_Tablet_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.spanner.v1.LocationProto
        .internal_static_google_spanner_v1_Tablet_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.spanner.v1.Tablet.class, com.google.spanner.v1.Tablet.Builder.class);
  }

  /** Protobuf enum {@code google.spanner.v1.Tablet.Role} */
  public enum Role implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * The tablet can perform reads and (if elected leader) writes.
     * </pre>
     *
     * <code>READ_WRITE = 0;</code>
     */
    READ_WRITE(0),
    /**
     *
     *
     * <pre>
     * The tablet can only perform reads.
     * </pre>
     *
     * <code>READ_ONLY = 1;</code>
     */
    READ_ONLY(1),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * The tablet can perform reads and (if elected leader) writes.
     * </pre>
     *
     * <code>READ_WRITE = 0;</code>
     */
    public static final int READ_WRITE_VALUE = 0;

    /**
     *
     *
     * <pre>
     * The tablet can only perform reads.
     * </pre>
     *
     * <code>READ_ONLY = 1;</code>
     */
    public static final int READ_ONLY_VALUE = 1;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Role valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Role forNumber(int value) {
      switch (value) {
        case 0:
          return READ_WRITE;
        case 1:
          return READ_ONLY;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Role> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<Role> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Role>() {
          public Role findValueByNumber(int number) {
            return Role.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.spanner.v1.Tablet.getDescriptor().getEnumTypes().get(0);
    }

    private static final Role[] VALUES = values();

    public static Role valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Role(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.spanner.v1.Tablet.Role)
  }

  public static final int TABLET_UID_FIELD_NUMBER = 1;
  private long tabletUid_ = 0L;

  /**
   *
   *
   * <pre>
   * The UID of the tablet, unique within the database. Matches the
   * `tablet_uids` and `leader_tablet_uid` fields in `Group`.
   * </pre>
   *
   * <code>uint64 tablet_uid = 1;</code>
   *
   * @return The tabletUid.
   */
  @java.lang.Override
  public long getTabletUid() {
    return tabletUid_;
  }

  public static final int SERVER_ADDRESS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private volatile java.lang.Object serverAddress_ = "";

  /**
   *
   *
   * <pre>
   * The address of the server that is serving this tablet -- either an IP
   * address or DNS hostname and a port number.
   * </pre>
   *
   * <code>string server_address = 2;</code>
   *
   * @return The serverAddress.
   */
  @java.lang.Override
  public java.lang.String getServerAddress() {
    java.lang.Object ref = serverAddress_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      serverAddress_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * The address of the server that is serving this tablet -- either an IP
   * address or DNS hostname and a port number.
   * </pre>
   *
   * <code>string server_address = 2;</code>
   *
   * @return The bytes for serverAddress.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getServerAddressBytes() {
    java.lang.Object ref = serverAddress_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      serverAddress_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LOCATION_FIELD_NUMBER = 3;

  @SuppressWarnings("serial")
  private volatile java.lang.Object location_ = "";

  /**
   *
   *
   * <pre>
   * Where this tablet is located. In the Spanner managed service, this is the
   * name of a region, such as "us-central1". In Spanner Omni, this is a
   * previously created location.
   * </pre>
   *
   * <code>string location = 3;</code>
   *
   * @return The location.
   */
  @java.lang.Override
  public java.lang.String getLocation() {
    java.lang.Object ref = location_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      location_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Where this tablet is located. In the Spanner managed service, this is the
   * name of a region, such as "us-central1". In Spanner Omni, this is a
   * previously created location.
   * </pre>
   *
   * <code>string location = 3;</code>
   *
   * @return The bytes for location.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getLocationBytes() {
    java.lang.Object ref = location_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      location_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ROLE_FIELD_NUMBER = 4;
  private int role_ = 0;

  /**
   * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
   *
   * @return The enum numeric value on the wire for role.
   */
  @java.lang.Override
  public int getRoleValue() {
    return role_;
  }

  /**
   * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
   *
   * @return The role.
   */
  @java.lang.Override
  public com.google.spanner.v1.Tablet.Role getRole() {
    com.google.spanner.v1.Tablet.Role result = com.google.spanner.v1.Tablet.Role.forNumber(role_);
    return result == null ? com.google.spanner.v1.Tablet.Role.UNRECOGNIZED : result;
  }

  public static final int INCARNATION_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString incarnation_ = com.google.protobuf.ByteString.EMPTY;

  /**
   *
   *
   * <pre>
   * `incarnation` indicates the freshness of the tablet information contained
   * in this proto. Incarnations can be compared lexicographically; if
   * incarnation A is greater than incarnation B, then the `Tablet`
   * corresponding to A is newer than the `Tablet` corresponding to B, and
   * should be used preferentially.
   * </pre>
   *
   * <code>bytes incarnation = 5;</code>
   *
   * @return The incarnation.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getIncarnation() {
    return incarnation_;
  }

  public static final int DISTANCE_FIELD_NUMBER = 6;
  private int distance_ = 0;

  /**
   *
   *
   * <pre>
   * Distances help the client pick the closest tablet out of the list of
   * tablets for a given request. Tablets with lower distances should generally
   * be preferred. Tablets with the same distance are approximately equally
   * close; the client can choose arbitrarily.
   *
   * Distances do not correspond precisely to expected latency, geographical
   * distance, or anything else. Distances should be compared only between
   * tablets of the same group; they are not meaningful between different
   * groups.
   *
   * A value of zero indicates that the tablet may be in the same zone as
   * the client, and have minimum network latency. A value less than or equal to
   * five indicates that the tablet is thought to be in the same region as the
   * client, and may have a few milliseconds of network latency. Values greater
   * than five are most likely in a different region, with non-trivial network
   * latency.
   *
   * Clients should use the following algorithm:
   *   * If the request is using a directed read, eliminate any tablets that
   *     do not match the directed read's target zone and/or replica type.
   *   * (Read-write transactions only) Choose leader tablet if it has an
   *     distance &lt;=5.
   *   * Group and sort tablets by distance. Choose a random
   *     tablet with the lowest distance. If the request
   *     is not a directed read, only consider replicas with distances &lt;=5.
   *   * Send the request to the fallback endpoint.
   *
   * The tablet picked by this algorithm may be skipped, either because it is
   * marked as `skip` by the server or because the corresponding server is
   * unreachable, flow controlled, etc. Skipped tablets should be added to the
   * `skipped_tablet_uid` field in `RoutingHint`; the algorithm above should
   * then be re-run without including the skipped tablet(s) to pick the next
   * best tablet.
   * </pre>
   *
   * <code>uint32 distance = 6;</code>
   *
   * @return The distance.
   */
  @java.lang.Override
  public int getDistance() {
    return distance_;
  }

  public static final int SKIP_FIELD_NUMBER = 7;
  private boolean skip_ = false;

  /**
   *
   *
   * <pre>
   * If true, the tablet should not be chosen by the client. Typically, this
   * signals that the tablet is unhealthy in some way. Tablets with `skip`
   * set to true should be reported back to the server in
   * `RoutingHint.skipped_tablet_uid`; this cues the server to send updated
   * information for this tablet should it become usable again.
   * </pre>
   *
   * <code>bool skip = 7;</code>
   *
   * @return The skip.
   */
  @java.lang.Override
  public boolean getSkip() {
    return skip_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (tabletUid_ != 0L) {
      output.writeUInt64(1, tabletUid_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(serverAddress_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, serverAddress_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(location_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, location_);
    }
    if (role_ != com.google.spanner.v1.Tablet.Role.READ_WRITE.getNumber()) {
      output.writeEnum(4, role_);
    }
    if (!incarnation_.isEmpty()) {
      output.writeBytes(5, incarnation_);
    }
    if (distance_ != 0) {
      output.writeUInt32(6, distance_);
    }
    if (skip_ != false) {
      output.writeBool(7, skip_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (tabletUid_ != 0L) {
      size += com.google.protobuf.CodedOutputStream.computeUInt64Size(1, tabletUid_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(serverAddress_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, serverAddress_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(location_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, location_);
    }
    if (role_ != com.google.spanner.v1.Tablet.Role.READ_WRITE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(4, role_);
    }
    if (!incarnation_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream.computeBytesSize(5, incarnation_);
    }
    if (distance_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeUInt32Size(6, distance_);
    }
    if (skip_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(7, skip_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.spanner.v1.Tablet)) {
      return super.equals(obj);
    }
    com.google.spanner.v1.Tablet other = (com.google.spanner.v1.Tablet) obj;

    if (getTabletUid() != other.getTabletUid()) return false;
    if (!getServerAddress().equals(other.getServerAddress())) return false;
    if (!getLocation().equals(other.getLocation())) return false;
    if (role_ != other.role_) return false;
    if (!getIncarnation().equals(other.getIncarnation())) return false;
    if (getDistance() != other.getDistance()) return false;
    if (getSkip() != other.getSkip()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TABLET_UID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(getTabletUid());
    hash = (37 * hash) + SERVER_ADDRESS_FIELD_NUMBER;
    hash = (53 * hash) + getServerAddress().hashCode();
    hash = (37 * hash) + LOCATION_FIELD_NUMBER;
    hash = (53 * hash) + getLocation().hashCode();
    hash = (37 * hash) + ROLE_FIELD_NUMBER;
    hash = (53 * hash) + role_;
    hash = (37 * hash) + INCARNATION_FIELD_NUMBER;
    hash = (53 * hash) + getIncarnation().hashCode();
    hash = (37 * hash) + DISTANCE_FIELD_NUMBER;
    hash = (53 * hash) + getDistance();
    hash = (37 * hash) + SKIP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getSkip());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.spanner.v1.Tablet parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.spanner.v1.Tablet parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.spanner.v1.Tablet parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.spanner.v1.Tablet parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.spanner.v1.Tablet parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.spanner.v1.Tablet parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.spanner.v1.Tablet parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.spanner.v1.Tablet parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.spanner.v1.Tablet parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.spanner.v1.Tablet parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.spanner.v1.Tablet parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.spanner.v1.Tablet parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.spanner.v1.Tablet prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * A `Tablet` represents a single replica of a `Group`. A tablet is served by a
   * single server at a time, and can move between servers due to server death or
   * simply load balancing.
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.Tablet}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.Tablet)
      com.google.spanner.v1.TabletOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.spanner.v1.LocationProto
          .internal_static_google_spanner_v1_Tablet_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.spanner.v1.LocationProto
          .internal_static_google_spanner_v1_Tablet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.spanner.v1.Tablet.class, com.google.spanner.v1.Tablet.Builder.class);
    }

    // Construct using com.google.spanner.v1.Tablet.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      tabletUid_ = 0L;
      serverAddress_ = "";
      location_ = "";
      role_ = 0;
      incarnation_ = com.google.protobuf.ByteString.EMPTY;
      distance_ = 0;
      skip_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.spanner.v1.LocationProto
          .internal_static_google_spanner_v1_Tablet_descriptor;
    }

    @java.lang.Override
    public com.google.spanner.v1.Tablet getDefaultInstanceForType() {
      return com.google.spanner.v1.Tablet.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.spanner.v1.Tablet build() {
      com.google.spanner.v1.Tablet result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.spanner.v1.Tablet buildPartial() {
      com.google.spanner.v1.Tablet result = new com.google.spanner.v1.Tablet(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.spanner.v1.Tablet result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.tabletUid_ = tabletUid_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.serverAddress_ = serverAddress_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.location_ = location_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.role_ = role_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.incarnation_ = incarnation_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.distance_ = distance_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.skip_ = skip_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.spanner.v1.Tablet) {
        return mergeFrom((com.google.spanner.v1.Tablet) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.spanner.v1.Tablet other) {
      if (other == com.google.spanner.v1.Tablet.getDefaultInstance()) return this;
      if (other.getTabletUid() != 0L) {
        setTabletUid(other.getTabletUid());
      }
      if (!other.getServerAddress().isEmpty()) {
        serverAddress_ = other.serverAddress_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.getLocation().isEmpty()) {
        location_ = other.location_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.role_ != 0) {
        setRoleValue(other.getRoleValue());
      }
      if (other.getIncarnation() != com.google.protobuf.ByteString.EMPTY) {
        setIncarnation(other.getIncarnation());
      }
      if (other.getDistance() != 0) {
        setDistance(other.getDistance());
      }
      if (other.getSkip() != false) {
        setSkip(other.getSkip());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                tabletUid_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 18:
              {
                serverAddress_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
            case 26:
              {
                location_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 32:
              {
                role_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
            case 42:
              {
                incarnation_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
            case 48:
              {
                distance_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
            case 56:
              {
                skip_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private long tabletUid_;

    /**
     *
     *
     * <pre>
     * The UID of the tablet, unique within the database. Matches the
     * `tablet_uids` and `leader_tablet_uid` fields in `Group`.
     * </pre>
     *
     * <code>uint64 tablet_uid = 1;</code>
     *
     * @return The tabletUid.
     */
    @java.lang.Override
    public long getTabletUid() {
      return tabletUid_;
    }

    /**
     *
     *
     * <pre>
     * The UID of the tablet, unique within the database. Matches the
     * `tablet_uids` and `leader_tablet_uid` fields in `Group`.
     * </pre>
     *
     * <code>uint64 tablet_uid = 1;</code>
     *
     * @param value The tabletUid to set.
     * @return This builder for chaining.
     */
    public Builder setTabletUid(long value) {

      tabletUid_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The UID of the tablet, unique within the database. Matches the
     * `tablet_uids` and `leader_tablet_uid` fields in `Group`.
     * </pre>
     *
     * <code>uint64 tablet_uid = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTabletUid() {
      bitField0_ = (bitField0_ & ~0x00000001);
      tabletUid_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object serverAddress_ = "";

    /**
     *
     *
     * <pre>
     * The address of the server that is serving this tablet -- either an IP
     * address or DNS hostname and a port number.
     * </pre>
     *
     * <code>string server_address = 2;</code>
     *
     * @return The serverAddress.
     */
    public java.lang.String getServerAddress() {
      java.lang.Object ref = serverAddress_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serverAddress_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * The address of the server that is serving this tablet -- either an IP
     * address or DNS hostname and a port number.
     * </pre>
     *
     * <code>string server_address = 2;</code>
     *
     * @return The bytes for serverAddress.
     */
    public com.google.protobuf.ByteString getServerAddressBytes() {
      java.lang.Object ref = serverAddress_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        serverAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * The address of the server that is serving this tablet -- either an IP
     * address or DNS hostname and a port number.
     * </pre>
     *
     * <code>string server_address = 2;</code>
     *
     * @param value The serverAddress to set.
     * @return This builder for chaining.
     */
    public Builder setServerAddress(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      serverAddress_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The address of the server that is serving this tablet -- either an IP
     * address or DNS hostname and a port number.
     * </pre>
     *
     * <code>string server_address = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearServerAddress() {
      serverAddress_ = getDefaultInstance().getServerAddress();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The address of the server that is serving this tablet -- either an IP
     * address or DNS hostname and a port number.
     * </pre>
     *
     * <code>string server_address = 2;</code>
     *
     * @param value The bytes for serverAddress to set.
     * @return This builder for chaining.
     */
    public Builder setServerAddressBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      serverAddress_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.lang.Object location_ = "";

    /**
     *
     *
     * <pre>
     * Where this tablet is located. In the Spanner managed service, this is the
     * name of a region, such as "us-central1". In Spanner Omni, this is a
     * previously created location.
     * </pre>
     *
     * <code>string location = 3;</code>
     *
     * @return The location.
     */
    public java.lang.String getLocation() {
      java.lang.Object ref = location_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        location_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Where this tablet is located. In the Spanner managed service, this is the
     * name of a region, such as "us-central1". In Spanner Omni, this is a
     * previously created location.
     * </pre>
     *
     * <code>string location = 3;</code>
     *
     * @return The bytes for location.
     */
    public com.google.protobuf.ByteString getLocationBytes() {
      java.lang.Object ref = location_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        location_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Where this tablet is located. In the Spanner managed service, this is the
     * name of a region, such as "us-central1". In Spanner Omni, this is a
     * previously created location.
     * </pre>
     *
     * <code>string location = 3;</code>
     *
     * @param value The location to set.
     * @return This builder for chaining.
     */
    public Builder setLocation(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      location_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Where this tablet is located. In the Spanner managed service, this is the
     * name of a region, such as "us-central1". In Spanner Omni, this is a
     * previously created location.
     * </pre>
     *
     * <code>string location = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearLocation() {
      location_ = getDefaultInstance().getLocation();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Where this tablet is located. In the Spanner managed service, this is the
     * name of a region, such as "us-central1". In Spanner Omni, this is a
     * previously created location.
     * </pre>
     *
     * <code>string location = 3;</code>
     *
     * @param value The bytes for location to set.
     * @return This builder for chaining.
     */
    public Builder setLocationBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      location_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private int role_ = 0;

    /**
     * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
     *
     * @return The enum numeric value on the wire for role.
     */
    @java.lang.Override
    public int getRoleValue() {
      return role_;
    }

    /**
     * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
     *
     * @param value The enum numeric value on the wire for role to set.
     * @return This builder for chaining.
     */
    public Builder setRoleValue(int value) {
      role_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
     *
     * @return The role.
     */
    @java.lang.Override
    public com.google.spanner.v1.Tablet.Role getRole() {
      com.google.spanner.v1.Tablet.Role result = com.google.spanner.v1.Tablet.Role.forNumber(role_);
      return result == null ? com.google.spanner.v1.Tablet.Role.UNRECOGNIZED : result;
    }

    /**
     * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
     *
     * @param value The role to set.
     * @return This builder for chaining.
     */
    public Builder setRole(com.google.spanner.v1.Tablet.Role value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      role_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     * <code>.google.spanner.v1.Tablet.Role role = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearRole() {
      bitField0_ = (bitField0_ & ~0x00000008);
      role_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString incarnation_ = com.google.protobuf.ByteString.EMPTY;

    /**
     *
     *
     * <pre>
     * `incarnation` indicates the freshness of the tablet information contained
     * in this proto. Incarnations can be compared lexicographically; if
     * incarnation A is greater than incarnation B, then the `Tablet`
     * corresponding to A is newer than the `Tablet` corresponding to B, and
     * should be used preferentially.
     * </pre>
     *
     * <code>bytes incarnation = 5;</code>
     *
     * @return The incarnation.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getIncarnation() {
      return incarnation_;
    }

    /**
     *
     *
     * <pre>
     * `incarnation` indicates the freshness of the tablet information contained
     * in this proto. Incarnations can be compared lexicographically; if
     * incarnation A is greater than incarnation B, then the `Tablet`
     * corresponding to A is newer than the `Tablet` corresponding to B, and
     * should be used preferentially.
     * </pre>
     *
     * <code>bytes incarnation = 5;</code>
     *
     * @param value The incarnation to set.
     * @return This builder for chaining.
     */
    public Builder setIncarnation(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      incarnation_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * `incarnation` indicates the freshness of the tablet information contained
     * in this proto. Incarnations can be compared lexicographically; if
     * incarnation A is greater than incarnation B, then the `Tablet`
     * corresponding to A is newer than the `Tablet` corresponding to B, and
     * should be used preferentially.
     * </pre>
     *
     * <code>bytes incarnation = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearIncarnation() {
      bitField0_ = (bitField0_ & ~0x00000010);
      incarnation_ = getDefaultInstance().getIncarnation();
      onChanged();
      return this;
    }

    private int distance_;

    /**
     *
     *
     * <pre>
     * Distances help the client pick the closest tablet out of the list of
     * tablets for a given request. Tablets with lower distances should generally
     * be preferred. Tablets with the same distance are approximately equally
     * close; the client can choose arbitrarily.
     *
     * Distances do not correspond precisely to expected latency, geographical
     * distance, or anything else. Distances should be compared only between
     * tablets of the same group; they are not meaningful between different
     * groups.
     *
     * A value of zero indicates that the tablet may be in the same zone as
     * the client, and have minimum network latency. A value less than or equal to
     * five indicates that the tablet is thought to be in the same region as the
     * client, and may have a few milliseconds of network latency. Values greater
     * than five are most likely in a different region, with non-trivial network
     * latency.
     *
     * Clients should use the following algorithm:
     *   * If the request is using a directed read, eliminate any tablets that
     *     do not match the directed read's target zone and/or replica type.
     *   * (Read-write transactions only) Choose leader tablet if it has an
     *     distance &lt;=5.
     *   * Group and sort tablets by distance. Choose a random
     *     tablet with the lowest distance. If the request
     *     is not a directed read, only consider replicas with distances &lt;=5.
     *   * Send the request to the fallback endpoint.
     *
     * The tablet picked by this algorithm may be skipped, either because it is
     * marked as `skip` by the server or because the corresponding server is
     * unreachable, flow controlled, etc. Skipped tablets should be added to the
     * `skipped_tablet_uid` field in `RoutingHint`; the algorithm above should
     * then be re-run without including the skipped tablet(s) to pick the next
     * best tablet.
     * </pre>
     *
     * <code>uint32 distance = 6;</code>
     *
     * @return The distance.
     */
    @java.lang.Override
    public int getDistance() {
      return distance_;
    }

    /**
     *
     *
     * <pre>
     * Distances help the client pick the closest tablet out of the list of
     * tablets for a given request. Tablets with lower distances should generally
     * be preferred. Tablets with the same distance are approximately equally
     * close; the client can choose arbitrarily.
     *
     * Distances do not correspond precisely to expected latency, geographical
     * distance, or anything else. Distances should be compared only between
     * tablets of the same group; they are not meaningful between different
     * groups.
     *
     * A value of zero indicates that the tablet may be in the same zone as
     * the client, and have minimum network latency. A value less than or equal to
     * five indicates that the tablet is thought to be in the same region as the
     * client, and may have a few milliseconds of network latency. Values greater
     * than five are most likely in a different region, with non-trivial network
     * latency.
     *
     * Clients should use the following algorithm:
     *   * If the request is using a directed read, eliminate any tablets that
     *     do not match the directed read's target zone and/or replica type.
     *   * (Read-write transactions only) Choose leader tablet if it has an
     *     distance &lt;=5.
     *   * Group and sort tablets by distance. Choose a random
     *     tablet with the lowest distance. If the request
     *     is not a directed read, only consider replicas with distances &lt;=5.
     *   * Send the request to the fallback endpoint.
     *
     * The tablet picked by this algorithm may be skipped, either because it is
     * marked as `skip` by the server or because the corresponding server is
     * unreachable, flow controlled, etc. Skipped tablets should be added to the
     * `skipped_tablet_uid` field in `RoutingHint`; the algorithm above should
     * then be re-run without including the skipped tablet(s) to pick the next
     * best tablet.
     * </pre>
     *
     * <code>uint32 distance = 6;</code>
     *
     * @param value The distance to set.
     * @return This builder for chaining.
     */
    public Builder setDistance(int value) {

      distance_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Distances help the client pick the closest tablet out of the list of
     * tablets for a given request. Tablets with lower distances should generally
     * be preferred. Tablets with the same distance are approximately equally
     * close; the client can choose arbitrarily.
     *
     * Distances do not correspond precisely to expected latency, geographical
     * distance, or anything else. Distances should be compared only between
     * tablets of the same group; they are not meaningful between different
     * groups.
     *
     * A value of zero indicates that the tablet may be in the same zone as
     * the client, and have minimum network latency. A value less than or equal to
     * five indicates that the tablet is thought to be in the same region as the
     * client, and may have a few milliseconds of network latency. Values greater
     * than five are most likely in a different region, with non-trivial network
     * latency.
     *
     * Clients should use the following algorithm:
     *   * If the request is using a directed read, eliminate any tablets that
     *     do not match the directed read's target zone and/or replica type.
     *   * (Read-write transactions only) Choose leader tablet if it has an
     *     distance &lt;=5.
     *   * Group and sort tablets by distance. Choose a random
     *     tablet with the lowest distance. If the request
     *     is not a directed read, only consider replicas with distances &lt;=5.
     *   * Send the request to the fallback endpoint.
     *
     * The tablet picked by this algorithm may be skipped, either because it is
     * marked as `skip` by the server or because the corresponding server is
     * unreachable, flow controlled, etc. Skipped tablets should be added to the
     * `skipped_tablet_uid` field in `RoutingHint`; the algorithm above should
     * then be re-run without including the skipped tablet(s) to pick the next
     * best tablet.
     * </pre>
     *
     * <code>uint32 distance = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDistance() {
      bitField0_ = (bitField0_ & ~0x00000020);
      distance_ = 0;
      onChanged();
      return this;
    }

    private boolean skip_;

    /**
     *
     *
     * <pre>
     * If true, the tablet should not be chosen by the client. Typically, this
     * signals that the tablet is unhealthy in some way. Tablets with `skip`
     * set to true should be reported back to the server in
     * `RoutingHint.skipped_tablet_uid`; this cues the server to send updated
     * information for this tablet should it become usable again.
     * </pre>
     *
     * <code>bool skip = 7;</code>
     *
     * @return The skip.
     */
    @java.lang.Override
    public boolean getSkip() {
      return skip_;
    }

    /**
     *
     *
     * <pre>
     * If true, the tablet should not be chosen by the client. Typically, this
     * signals that the tablet is unhealthy in some way. Tablets with `skip`
     * set to true should be reported back to the server in
     * `RoutingHint.skipped_tablet_uid`; this cues the server to send updated
     * information for this tablet should it become usable again.
     * </pre>
     *
     * <code>bool skip = 7;</code>
     *
     * @param value The skip to set.
     * @return This builder for chaining.
     */
    public Builder setSkip(boolean value) {

      skip_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * If true, the tablet should not be chosen by the client. Typically, this
     * signals that the tablet is unhealthy in some way. Tablets with `skip`
     * set to true should be reported back to the server in
     * `RoutingHint.skipped_tablet_uid`; this cues the server to send updated
     * information for this tablet should it become usable again.
     * </pre>
     *
     * <code>bool skip = 7;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSkip() {
      bitField0_ = (bitField0_ & ~0x00000040);
      skip_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.spanner.v1.Tablet)
  }

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Tablet)
  private static final com.google.spanner.v1.Tablet DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.spanner.v1.Tablet();
  }

  public static com.google.spanner.v1.Tablet getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Tablet> PARSER =
      new com.google.protobuf.AbstractParser<Tablet>() {
        @java.lang.Override
        public Tablet parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<Tablet> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Tablet> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.spanner.v1.Tablet getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
