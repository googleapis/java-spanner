/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/type.proto

package com.google.spanner.v1;

/**
 *
 *
 * <pre>
 * `Type` indicates the type of a Cloud Spanner value, as might be stored in a
 * table cell or returned from an SQL query.
 * </pre>
 *
 * Protobuf type {@code google.spanner.v1.Type}
 */
public final class Type extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.spanner.v1.Type)
    TypeOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use Type.newBuilder() to construct.
  private Type(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private Type() {
    code_ = 0;
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(UnusedPrivateParameter unused) {
    return new Type();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private Type(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8:
            {
              int rawValue = input.readEnum();

              code_ = rawValue;
              break;
            }
          case 18:
            {
              Builder subBuilder = null;
              if (arrayElementType_ != null) {
                subBuilder = arrayElementType_.toBuilder();
              }
              arrayElementType_ = input.readMessage(Type.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(arrayElementType_);
                arrayElementType_ = subBuilder.buildPartial();
              }

              break;
            }
          case 26:
            {
              StructType.Builder subBuilder = null;
              if (structType_ != null) {
                subBuilder = structType_.toBuilder();
              }
              structType_ = input.readMessage(StructType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(structType_);
                structType_ = subBuilder.buildPartial();
              }

              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return TypeProto.internal_static_google_spanner_v1_Type_descriptor;
  }

  @Override
  protected FieldAccessorTable internalGetFieldAccessorTable() {
    return TypeProto.internal_static_google_spanner_v1_Type_fieldAccessorTable
        .ensureFieldAccessorsInitialized(Type.class, Builder.class);
  }

  public static final int CODE_FIELD_NUMBER = 1;
  private int code_;
  /**
   *
   *
   * <pre>
   * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
   * </pre>
   *
   * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The enum numeric value on the wire for code.
   */
  @Override
  public int getCodeValue() {
    return code_;
  }
  /**
   *
   *
   * <pre>
   * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
   * </pre>
   *
   * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The code.
   */
  @Override
  public TypeCode getCode() {
    @SuppressWarnings("deprecation")
    TypeCode result = TypeCode.valueOf(code_);
    return result == null ? TypeCode.UNRECOGNIZED : result;
  }

  public static final int ARRAY_ELEMENT_TYPE_FIELD_NUMBER = 2;
  private Type arrayElementType_;
  /**
   *
   *
   * <pre>
   * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
   * is the type of the array elements.
   * </pre>
   *
   * <code>.google.spanner.v1.Type array_element_type = 2;</code>
   *
   * @return Whether the arrayElementType field is set.
   */
  @Override
  public boolean hasArrayElementType() {
    return arrayElementType_ != null;
  }
  /**
   *
   *
   * <pre>
   * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
   * is the type of the array elements.
   * </pre>
   *
   * <code>.google.spanner.v1.Type array_element_type = 2;</code>
   *
   * @return The arrayElementType.
   */
  @Override
  public Type getArrayElementType() {
    return arrayElementType_ == null ? Type.getDefaultInstance() : arrayElementType_;
  }
  /**
   *
   *
   * <pre>
   * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
   * is the type of the array elements.
   * </pre>
   *
   * <code>.google.spanner.v1.Type array_element_type = 2;</code>
   */
  @Override
  public TypeOrBuilder getArrayElementTypeOrBuilder() {
    return getArrayElementType();
  }

  public static final int STRUCT_TYPE_FIELD_NUMBER = 3;
  private StructType structType_;
  /**
   *
   *
   * <pre>
   * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
   * provides type information for the struct's fields.
   * </pre>
   *
   * <code>.google.spanner.v1.StructType struct_type = 3;</code>
   *
   * @return Whether the structType field is set.
   */
  @Override
  public boolean hasStructType() {
    return structType_ != null;
  }
  /**
   *
   *
   * <pre>
   * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
   * provides type information for the struct's fields.
   * </pre>
   *
   * <code>.google.spanner.v1.StructType struct_type = 3;</code>
   *
   * @return The structType.
   */
  @Override
  public StructType getStructType() {
    return structType_ == null ? StructType.getDefaultInstance() : structType_;
  }
  /**
   *
   *
   * <pre>
   * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
   * provides type information for the struct's fields.
   * </pre>
   *
   * <code>.google.spanner.v1.StructType struct_type = 3;</code>
   */
  @Override
  public StructTypeOrBuilder getStructTypeOrBuilder() {
    return getStructType();
  }

  private byte memoizedIsInitialized = -1;

  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (code_ != TypeCode.TYPE_CODE_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, code_);
    }
    if (arrayElementType_ != null) {
      output.writeMessage(2, getArrayElementType());
    }
    if (structType_ != null) {
      output.writeMessage(3, getStructType());
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (code_ != TypeCode.TYPE_CODE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(1, code_);
    }
    if (arrayElementType_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getArrayElementType());
    }
    if (structType_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getStructType());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof Type)) {
      return super.equals(obj);
    }
    Type other = (Type) obj;

    if (code_ != other.code_) return false;
    if (hasArrayElementType() != other.hasArrayElementType()) return false;
    if (hasArrayElementType()) {
      if (!getArrayElementType().equals(other.getArrayElementType())) return false;
    }
    if (hasStructType() != other.hasStructType()) return false;
    if (hasStructType()) {
      if (!getStructType().equals(other.getStructType())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CODE_FIELD_NUMBER;
    hash = (53 * hash) + code_;
    if (hasArrayElementType()) {
      hash = (37 * hash) + ARRAY_ELEMENT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getArrayElementType().hashCode();
    }
    if (hasStructType()) {
      hash = (37 * hash) + STRUCT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getStructType().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static Type parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static Type parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static Type parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static Type parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static Type parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static Type parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static Type parseFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static Type parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static Type parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static Type parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static Type parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static Type parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(Type prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * `Type` indicates the type of a Cloud Spanner value, as might be stored in a
   * table cell or returned from an SQL query.
   * </pre>
   *
   * Protobuf type {@code google.spanner.v1.Type}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.spanner.v1.Type)
      TypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return TypeProto.internal_static_google_spanner_v1_Type_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return TypeProto.internal_static_google_spanner_v1_Type_fieldAccessorTable
          .ensureFieldAccessorsInitialized(Type.class, Builder.class);
    }

    // Construct using com.google.spanner.v1.Type.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @Override
    public Builder clear() {
      super.clear();
      code_ = 0;

      if (arrayElementTypeBuilder_ == null) {
        arrayElementType_ = null;
      } else {
        arrayElementType_ = null;
        arrayElementTypeBuilder_ = null;
      }
      if (structTypeBuilder_ == null) {
        structType_ = null;
      } else {
        structType_ = null;
        structTypeBuilder_ = null;
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return TypeProto.internal_static_google_spanner_v1_Type_descriptor;
    }

    @Override
    public Type getDefaultInstanceForType() {
      return Type.getDefaultInstance();
    }

    @Override
    public Type build() {
      Type result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public Type buildPartial() {
      Type result = new Type(this);
      result.code_ = code_;
      if (arrayElementTypeBuilder_ == null) {
        result.arrayElementType_ = arrayElementType_;
      } else {
        result.arrayElementType_ = arrayElementTypeBuilder_.build();
      }
      if (structTypeBuilder_ == null) {
        result.structType_ = structType_;
      } else {
        result.structType_ = structTypeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }

    @Override
    public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.setField(field, value);
    }

    @Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
      return super.addRepeatedField(field, value);
    }

    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof Type) {
        return mergeFrom((Type) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Type other) {
      if (other == Type.getDefaultInstance()) return this;
      if (other.code_ != 0) {
        setCodeValue(other.getCodeValue());
      }
      if (other.hasArrayElementType()) {
        mergeArrayElementType(other.getArrayElementType());
      }
      if (other.hasStructType()) {
        mergeStructType(other.getStructType());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Type parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (Type) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int code_ = 0;
    /**
     *
     *
     * <pre>
     * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
     * </pre>
     *
     * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The enum numeric value on the wire for code.
     */
    @Override
    public int getCodeValue() {
      return code_;
    }
    /**
     *
     *
     * <pre>
     * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
     * </pre>
     *
     * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The enum numeric value on the wire for code to set.
     * @return This builder for chaining.
     */
    public Builder setCodeValue(int value) {

      code_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
     * </pre>
     *
     * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The code.
     */
    @Override
    public TypeCode getCode() {
      @SuppressWarnings("deprecation")
      TypeCode result = TypeCode.valueOf(code_);
      return result == null ? TypeCode.UNRECOGNIZED : result;
    }
    /**
     *
     *
     * <pre>
     * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
     * </pre>
     *
     * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The code to set.
     * @return This builder for chaining.
     */
    public Builder setCode(TypeCode value) {
      if (value == null) {
        throw new NullPointerException();
      }

      code_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
     * </pre>
     *
     * <code>.google.spanner.v1.TypeCode code = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearCode() {

      code_ = 0;
      onChanged();
      return this;
    }

    private Type arrayElementType_;
    private com.google.protobuf.SingleFieldBuilderV3<Type, Builder, TypeOrBuilder>
        arrayElementTypeBuilder_;
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     *
     * @return Whether the arrayElementType field is set.
     */
    public boolean hasArrayElementType() {
      return arrayElementTypeBuilder_ != null || arrayElementType_ != null;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     *
     * @return The arrayElementType.
     */
    public Type getArrayElementType() {
      if (arrayElementTypeBuilder_ == null) {
        return arrayElementType_ == null ? Type.getDefaultInstance() : arrayElementType_;
      } else {
        return arrayElementTypeBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    public Builder setArrayElementType(Type value) {
      if (arrayElementTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        arrayElementType_ = value;
        onChanged();
      } else {
        arrayElementTypeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    public Builder setArrayElementType(Builder builderForValue) {
      if (arrayElementTypeBuilder_ == null) {
        arrayElementType_ = builderForValue.build();
        onChanged();
      } else {
        arrayElementTypeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    public Builder mergeArrayElementType(Type value) {
      if (arrayElementTypeBuilder_ == null) {
        if (arrayElementType_ != null) {
          arrayElementType_ = Type.newBuilder(arrayElementType_).mergeFrom(value).buildPartial();
        } else {
          arrayElementType_ = value;
        }
        onChanged();
      } else {
        arrayElementTypeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    public Builder clearArrayElementType() {
      if (arrayElementTypeBuilder_ == null) {
        arrayElementType_ = null;
        onChanged();
      } else {
        arrayElementType_ = null;
        arrayElementTypeBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    public Builder getArrayElementTypeBuilder() {

      onChanged();
      return getArrayElementTypeFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    public TypeOrBuilder getArrayElementTypeOrBuilder() {
      if (arrayElementTypeBuilder_ != null) {
        return arrayElementTypeBuilder_.getMessageOrBuilder();
      } else {
        return arrayElementType_ == null ? Type.getDefaultInstance() : arrayElementType_;
      }
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
     * is the type of the array elements.
     * </pre>
     *
     * <code>.google.spanner.v1.Type array_element_type = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<Type, Builder, TypeOrBuilder>
        getArrayElementTypeFieldBuilder() {
      if (arrayElementTypeBuilder_ == null) {
        arrayElementTypeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<Type, Builder, TypeOrBuilder>(
                getArrayElementType(), getParentForChildren(), isClean());
        arrayElementType_ = null;
      }
      return arrayElementTypeBuilder_;
    }

    private StructType structType_;
    private com.google.protobuf.SingleFieldBuilderV3<
            StructType, StructType.Builder, StructTypeOrBuilder>
        structTypeBuilder_;
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     *
     * @return Whether the structType field is set.
     */
    public boolean hasStructType() {
      return structTypeBuilder_ != null || structType_ != null;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     *
     * @return The structType.
     */
    public StructType getStructType() {
      if (structTypeBuilder_ == null) {
        return structType_ == null ? StructType.getDefaultInstance() : structType_;
      } else {
        return structTypeBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    public Builder setStructType(StructType value) {
      if (structTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        structType_ = value;
        onChanged();
      } else {
        structTypeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    public Builder setStructType(StructType.Builder builderForValue) {
      if (structTypeBuilder_ == null) {
        structType_ = builderForValue.build();
        onChanged();
      } else {
        structTypeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    public Builder mergeStructType(StructType value) {
      if (structTypeBuilder_ == null) {
        if (structType_ != null) {
          structType_ = StructType.newBuilder(structType_).mergeFrom(value).buildPartial();
        } else {
          structType_ = value;
        }
        onChanged();
      } else {
        structTypeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    public Builder clearStructType() {
      if (structTypeBuilder_ == null) {
        structType_ = null;
        onChanged();
      } else {
        structType_ = null;
        structTypeBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    public StructType.Builder getStructTypeBuilder() {

      onChanged();
      return getStructTypeFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    public StructTypeOrBuilder getStructTypeOrBuilder() {
      if (structTypeBuilder_ != null) {
        return structTypeBuilder_.getMessageOrBuilder();
      } else {
        return structType_ == null ? StructType.getDefaultInstance() : structType_;
      }
    }
    /**
     *
     *
     * <pre>
     * If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
     * provides type information for the struct's fields.
     * </pre>
     *
     * <code>.google.spanner.v1.StructType struct_type = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            StructType, StructType.Builder, StructTypeOrBuilder>
        getStructTypeFieldBuilder() {
      if (structTypeBuilder_ == null) {
        structTypeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                StructType, StructType.Builder, StructTypeOrBuilder>(
                getStructType(), getParentForChildren(), isClean());
        structType_ = null;
      }
      return structTypeBuilder_;
    }

    @Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.spanner.v1.Type)
  }

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Type)
  private static final Type DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new Type();
  }

  public static Type getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Type> PARSER =
      new com.google.protobuf.AbstractParser<Type>() {
        @Override
        public Type parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Type(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<Type> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<Type> getParserForType() {
    return PARSER;
  }

  @Override
  public Type getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
