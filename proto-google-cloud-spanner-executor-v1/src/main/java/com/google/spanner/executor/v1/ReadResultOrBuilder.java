/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/executor/v1/executor.proto

package com.google.spanner.executor.v1;

public interface ReadResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.spanner.executor.v1.ReadResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Table name.
   * </pre>
   *
   * <code>string table = 1;</code>
   * @return The table.
   */
  java.lang.String getTable();
  /**
   * <pre>
   * Table name.
   * </pre>
   *
   * <code>string table = 1;</code>
   * @return The bytes for table.
   */
  com.google.protobuf.ByteString
      getTableBytes();

  /**
   * <pre>
   * Table id, i.e. catalog::Table::TableID()
   * </pre>
   *
   * <code>int32 table_id = 2;</code>
   * @return The tableId.
   */
  int getTableId();

  /**
   * <pre>
   * Index name, if read from an index.
   * </pre>
   *
   * <code>string index = 3;</code>
   * @return The index.
   */
  java.lang.String getIndex();
  /**
   * <pre>
   * Index name, if read from an index.
   * </pre>
   *
   * <code>string index = 3;</code>
   * @return The bytes for index.
   */
  com.google.protobuf.ByteString
      getIndexBytes();

  /**
   * <pre>
   * Request index (multiread only).
   * </pre>
   *
   * <code>int32 request_index = 4;</code>
   * @return The requestIndex.
   */
  int getRequestIndex();

  /**
   * <pre>
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   * </pre>
   *
   * <code>repeated .google.spanner.executor.v1.ValueList row = 5;</code>
   */
  java.util.List<com.google.spanner.executor.v1.ValueList> 
      getRowList();
  /**
   * <pre>
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   * </pre>
   *
   * <code>repeated .google.spanner.executor.v1.ValueList row = 5;</code>
   */
  com.google.spanner.executor.v1.ValueList getRow(int index);
  /**
   * <pre>
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   * </pre>
   *
   * <code>repeated .google.spanner.executor.v1.ValueList row = 5;</code>
   */
  int getRowCount();
  /**
   * <pre>
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   * </pre>
   *
   * <code>repeated .google.spanner.executor.v1.ValueList row = 5;</code>
   */
  java.util.List<? extends com.google.spanner.executor.v1.ValueListOrBuilder> 
      getRowOrBuilderList();
  /**
   * <pre>
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   * </pre>
   *
   * <code>repeated .google.spanner.executor.v1.ValueList row = 5;</code>
   */
  com.google.spanner.executor.v1.ValueListOrBuilder getRowOrBuilder(
      int index);

  /**
   * <pre>
   * The type of rows read. It must be set if at least one row was read.
   * </pre>
   *
   * <code>.google.spanner.v1.StructType row_type = 6;</code>
   * @return Whether the rowType field is set.
   */
  boolean hasRowType();
  /**
   * <pre>
   * The type of rows read. It must be set if at least one row was read.
   * </pre>
   *
   * <code>.google.spanner.v1.StructType row_type = 6;</code>
   * @return The rowType.
   */
  com.google.spanner.v1.StructType getRowType();
  /**
   * <pre>
   * The type of rows read. It must be set if at least one row was read.
   * </pre>
   *
   * <code>.google.spanner.v1.StructType row_type = 6;</code>
   */
  com.google.spanner.v1.StructTypeOrBuilder getRowTypeOrBuilder();

  /**
   * <pre>
   * The read timestamp if the read is imported into an optimistic transaction..
   * </pre>
   *
   * <code>int64 read_timestamp = 7;</code>
   * @return The readTimestamp.
   */
  long getReadTimestamp();
}
