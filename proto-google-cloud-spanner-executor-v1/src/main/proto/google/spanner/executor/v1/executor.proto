// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.spanner.executor.v1;

import "google/longrunning/operations.proto";
import "google/spanner/admin/database/v1/backup.proto";
import "google/spanner/admin/database/v1/common.proto";
import "google/spanner/admin/database/v1/spanner_database_admin.proto";
import "google/spanner/admin/instance/v1/spanner_instance_admin.proto";

import "google/protobuf/timestamp.proto";

import "google/spanner/v1/type.proto";
import "google/rpc/status.proto";

option java_multiple_files = true;
option java_outer_classname = "ExecutorProto";
option java_package = "com.google.spanner.executor.v1";

// Messages in this file are part of the cloud SpannerExecutor API.

// SpannerAction defines a primitive action that can be performed against
// Spanner or MiniSpanner, such as begin or commit a transaction, or perform
// a read or mutation.
message SpannerAction {
  // Database against which to perform action. Depending on the kind of action,
  // it may be required.
  // In a context where a series of actions take place, an action may omit
  // database path if it applies to the same database as the previous action.
  string database_path = 1;
  oneof action {
    // Transaction manipulation
    StartTransactionAction start = 10;
    FinishTransactionAction finish = 11;
    // Reads and writes
    ReadAction read = 20;
    MutationAction mutation = 22;
    AdminAction admin = 23;
  }
}

// A single read request.
message ReadAction {
  string table = 1;
  optional string index = 2;
  // List of columns must begin with the key columns used for the read.
  repeated string column = 3;
  KeySet keys = 4;
  // Limit on number of rows to read. If set, must be positive.
  int32 limit = 5;
}

// Value represents a single value that can be read or written to/from
// Spanner.
message Value {
  // Exactly one of the following fields will be present.
  oneof value_type {
    // If null is true, then this value is null.
    bool null = 1;

    // Values of non-array type.
    int64 int_value = 2;
    bool bool_value = 3;
    double double_value = 4;
    bytes bytes_value = 5;
    string string_value = 6;
    ValueList struct_value = 7;
    google.protobuf.Timestamp timestamp_value = 8;

    // Date is specified as a number of days since Unix epoch.
    int32 date_value = 9;

    // If true, holds the sentinel value for the transaction CommitTimestamp.
    bool commit_timestamp = 10;

    // Values of array type. They should all be the same type.
    ValueList array_value = 11;
  }

  // Type of array element. Only set if value is an array.
  optional google.spanner.v1.Type array_type = 12;
}

message KeyRange {
  // "start" and "limit" must have the same number of key parts,
  // though they may name only a prefix of the table or index key.
  ValueList start = 1;
  ValueList limit = 2;

  // RangeType controls whether "start" and "limit" are open or
  // closed. By default, "start" is closed, and "limit" is open.
  enum Type {
    CLOSED_CLOSED = 0;  // [start,limit]
    CLOSED_OPEN = 1;    // [start,limit) -- default
    OPEN_CLOSED = 2;    // (start,limit]
    OPEN_OPEN = 3;      // (start,limit)
  }
  optional Type type = 3;
}

// KeySet defines a collection of Spanner keys and/or key ranges. All
// the keys are expected to be in the same table. The keys need not be
// sorted in any particular way.
message KeySet {
  repeated ValueList point = 1;
  repeated KeyRange range = 2;
  bool all = 3;
}

// List of values.
message ValueList {
  repeated Value value = 1;
}

// A single mutation request.
message MutationAction {
  // Arguments to Insert, InsertOrUpdate, and Replace operations.
  message InsertArgs {
    // The names of the columns to be written.
    repeated string column = 1;
    // Type information for the "values" entries below.
    repeated google.spanner.v1.Type type = 2;
    // The values to be written.
    repeated ValueList values = 3;
  }

  // Arguments to Update.
  message UpdateArgs {
    // The columns to be updated. Identical to InsertArgs.column.
    repeated string column = 1;
    // Type information for "values". Identical to InsertArgs.type.
    repeated google.spanner.v1.Type type = 2;
    // The values to be updated. Identical to InsertArgs.values.
    repeated ValueList values = 3;
  }

  message Mod {
    // The table to write.
    string table = 1;
    // Exactly one of the remaining elements may be present.
    // Insert new rows into "table".
    InsertArgs insert = 2;
    // Update columns stored in existing rows of "table".
    UpdateArgs update = 3;
    // Insert or update existing rows of "table".
    InsertArgs insert_or_update = 4;
    // Replace existing rows of "table".
    InsertArgs replace = 5;
    // Delete rows from "table".
    KeySet delete = 6;
  }
  repeated Mod mod = 1;
}

// StartTransactionAction defines an action of initializing a transaction.
message StartTransactionAction {
  // Concurrency is for read-only transactions and must be omitted for
  // read-write transactions.
  optional Concurrency concurrency = 1;
  // Metadata about tables and columns that will be involved in this
  // transaction. It is to convert values of key parts correctly.
  repeated TableMetadata table = 2;
  // Transaction_seed contains workid and op pair for this transaction, used for
  // testing.
  string transaction_seed = 3;
}

// Concurrency for read-only transactions.
message Concurrency {
  oneof concurrency_mode {
    double staleness_seconds = 1;
    int64 min_read_timestamp_micros = 2;
    double max_staleness_seconds = 3;
    int64 exact_timestamp_micros = 4;
    bool strong = 5;  // must only be set to true, or unset.
    bool batch = 6;   // must only be set to true, or unset.
  }
  // True if exact_timestamp_micros is set, and the chosen timestamp is that of
  // a snapshot epoch.
  bool snapshot_epoch_read = 7;
  // If set, this is a snapshot epoch read constrained to read only the
  // specified log scope root table, and its children. Will not be set for full
  // database epochs.
  string snapshot_epoch_root_table = 8;
  // Set only when batch is true.
  int64 batch_read_timestamp = 9;
}

// TableMetadata contains metadata of a single table.
message TableMetadata {
  // Table name.
  string name = 1;
  // Columns, in the same order as in the schema.
  repeated ColumnMetadata column = 2;
  // Keys, in order. Column name is currently not populated.
  repeated ColumnMetadata key_column = 3;
}

// ColumnMetadata represents metadata of a single column.
message ColumnMetadata {
  // Column name.
  string name = 1;
  // Column type.
  google.spanner.v1.Type type = 2;
}

// FinishTransactionAction defines an action of finishing a transaction.
message FinishTransactionAction {
  enum Mode {
    COMMIT = 0;
    // Drop the transaction without committing it.
    ABANDON = 1;
  }
  // Defines how exactly the transaction should be completed, e.g. with
  // commit or abortion.
  Mode mode = 1;
}

// AdminAction defines all the cloud spanner admin actions,
// including instance/database admin ops, backup ops and operation actions.
// next proto tag: 42.
message AdminAction {
  oneof action {
    CreateUserInstanceConfigAction create_user_instance_config = 36;
    UpdateUserInstanceConfigAction update_user_instance_config = 39;
    DeleteUserInstanceConfigAction delete_user_instance_config = 37;
    GetCloudInstanceConfigAction get_cloud_instance_config = 40;
    ListCloudInstanceConfigsAction list_instance_configs = 38;
    // Cloud instance/database ops
    CreateCloudInstanceAction create_cloud_instance = 10;
    UpdateCloudInstanceAction update_cloud_instance = 18;
    DeleteCloudInstanceAction delete_cloud_instance = 34;
    ListCloudInstancesAction list_cloud_instances = 19;
    GetCloudInstanceAction get_cloud_instance = 41;
    CreateCloudDatabaseAction create_cloud_database = 11;
    UpdateCloudDatabaseDdlAction update_cloud_database_ddl = 12;
    DropCloudDatabaseAction drop_cloud_database = 13;
    ListCloudDatabasesAction list_cloud_databases = 14;
    ListCloudDatabaseOperationsAction list_cloud_database_operations = 15;
    RestoreCloudDatabaseAction restore_cloud_database = 16;
    GetCloudDatabaseAction get_cloud_database = 17;
    // Cloud backup ops
    CreateCloudBackupAction create_cloud_backup = 20;
    CopyCloudBackupAction copy_cloud_backup = 35;
    GetCloudBackupAction get_cloud_backup = 21;
    UpdateCloudBackupAction update_cloud_backup = 22;
    DeleteCloudBackupAction delete_cloud_backup = 23;
    ListCloudBackupsAction list_cloud_backups = 24;
    ListCloudBackupOperationsAction list_cloud_backup_operations = 25;
    // Operation ops
    GetOperationAction get_operation = 31;
    CancelOperationAction cancel_operation = 33;
  }
}

// Action that creates a user instance config.
message CreateUserInstanceConfigAction {
  // User instance config ID (not path), e.g. "custom-config".
  string user_config_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
  // Base config ID, e.g. "test-config".
  string base_config_id = 3;
  // Replicas that should be included in the user config.
  repeated google.spanner.admin.instance.v1.ReplicaInfo replicas = 4;
}

// Action that updates a user instance config.
message UpdateUserInstanceConfigAction {
  // User instance config ID (not path), e.g. "custom-config".
  string user_config_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
  // The descriptive name for this instance config as it appears in UIs.
  optional string display_name = 3;
  // labels.
  map<string, string> labels = 4;
}

// Action that gets a user instance config.
message GetCloudInstanceConfigAction {
  // Instance config ID (not path), e.g. "custom-config".
  string instance_config_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
}

// Action that deletes a user instance config.
message ListCloudInstanceConfigsAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Number of instance configs to be returned in the response. If 0 or
  // less, defaults to the server's maximum allowed page size.
  optional int32 page_size = 2;
  // If non-empty, "page_token" should contain a next_page_token
  // from a previous ListInstanceConfigsResponse to the same "parent".
  optional string page_token = 3;
}

// Action that lists instance configs.
message DeleteUserInstanceConfigAction {
  // User instance config ID (not path), e.g. "custom-config".
  string user_config_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
}

// Action that creates a Cloud Spanner instance.
message CreateCloudInstanceAction {
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
  // Instance config ID, e.g. "test-config".
  string instance_config_id = 3;
  // Number of nodes (processing_units should not be set or set to 0 if used).
  optional int32 node_count = 4;
  // Number of processing units (node_count should be set to 0 if used).
  optional int32 processing_units = 6;
  // labels.
  map<string, string> labels = 5;
}

// Action that updates a Cloud Spanner instance.
message UpdateCloudInstanceAction {
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 1;

  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;

  // The descriptive name for this instance as it appears in UIs.
  // Must be unique per project and between 4 and 30 characters in length.
  optional string display_name = 3;

  // The number of nodes allocated to this instance. At most one of either
  // node_count or processing_units should be present in the message.
  optional int32 node_count = 4;

  // The number of processing units allocated to this instance. At most one of
  // processing_units or node_count should be present in the message.
  optional int32 processing_units = 5;

  // labels.
  map<string, string> labels = 6;
}

// Action that deletes a Cloud Spanner instance.
message DeleteCloudInstanceAction {
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 1;

  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
}

// Action that creates a Cloud Spanner database.
message CreateCloudDatabaseAction {
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
  // Cloud database name (not full path), e.g. "db0".
  string database_name = 3;
  // SDL statements to apply to the new database.
  repeated string sdl_statement = 4;
  // The KMS key used to encrypt the database to be created if the database
  // should be CMEK protected.
  google.spanner.admin.database.v1.EncryptionConfig encryption_config =
    5;
}

// Action that updates the schema of a Cloud Spanner database.
message UpdateCloudDatabaseDdlAction {
  // Required. Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 1;
  // Required. Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
  // Required. Cloud database name (not full path), e.g. "db0".
  string database_name = 3;
  // SDL statements to apply to the database.
  repeated string sdl_statement = 4;
  // Op ID can be used to track progress of the update. If set, it must be
  // unique per database. If not set, Cloud Spanner will generate operation ID
  // automatically.
  string operation_id = 5;
}

// Action that drops a Cloud Spanner database.
message DropCloudDatabaseAction {
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 1;
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 2;
  // Cloud database name (not full path), e.g. "db0".
  string database_name = 3;
}

// Action that lists Cloud Spanner databases.
message ListCloudDatabasesAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path) to list databases from, e.g. "test-instance".
  string instance_id = 2;
  // Number of databases to be returned in the response. If 0 or
  // less, defaults to the server's maximum allowed page size.
  int32 page_size = 3;
  // If non-empty, "page_token" should contain a next_page_token
  // from a previous ListDatabasesResponse to the same "parent"
  // and with the same "filter".
  string page_token = 4;
}

// Action that lists Cloud Spanner databases.
message ListCloudInstancesAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // A filter expression that filters what operations are returned in the
  // response.
  // The expression must specify the field name, a comparison operator,
  // and the value that you want to use for filtering.
  // Refer spanner_instance_admin.proto.ListInstancesRequest for
  // detail.
  optional string filter = 2;
  // Number of instances to be returned in the response. If 0 or
  // less, defaults to the server's maximum allowed page size.
  optional int32 page_size = 3;
  // If non-empty, "page_token" should contain a next_page_token
  // from a previous ListInstancesResponse to the same "parent"
  // and with the same "filter".
  optional string page_token = 4;
}

// Action that retrieves a Cloud Spanner instance.
message GetCloudInstanceAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path) to retrieve the instance from,
  // e.g. "test-instance".
  string instance_id = 2;
}

// Action that lists Cloud Spanner database operations.
message ListCloudDatabaseOperationsAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path) to list database operations from,
  // e.g. "test-instance".
  string instance_id = 2;
  // A filter expression that filters what operations are returned in the
  // response.
  // The expression must specify the field name, a comparison operator,
  // and the value that you want to use for filtering.
  // Refer spanner_database_admin.proto.ListDatabaseOperationsRequest for
  // detail.
  string filter = 3;
  // Number of databases to be returned in the response. If 0 or
  // less, defaults to the server's maximum allowed page size.
  int32 page_size = 4;
  // If non-empty, "page_token" should contain a next_page_token
  // from a previous ListDatabaseOperationsResponse to the same "parent"
  // and with the same "filter".
  string page_token = 5;
}

// Action that restores a Cloud Spanner database from a backup.
message RestoreCloudDatabaseAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path) containing the backup, e.g. "backup-instance".
  string backup_instance_id = 2;
  // The id of the backup from which to restore, e.g. "test-backup".
  string backup_id = 3;
  // Cloud instance ID (not path) containing the database, e.g.
  // "database-instance".
  string database_instance_id = 4;
  // The id of the database to create and restore to, e.g. "db0". Note that this
  // database must not already exist.
  string database_name = 5;
}

// Action that gets a Cloud Spanner database.
message GetCloudDatabaseAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 2;
  // The id of the database to get, e.g. "db0".
  string database_name = 3;
}

// Action that updates the schema of an Infra Spanner database.
message UpdateInfraDatabaseAction {
  // SDL statements to apply to the database.
  repeated string sdl_statement = 1;
}

// Action that creates a Cloud Spanner database backup.
message CreateCloudBackupAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 2;
  // The id of the backup to be created, e.g. "test-backup".
  string backup_id = 3;
  // The id of the database from which this backup was
  // created, e.g. "db0". Note that this needs to be in the
  // same instance as the backup.
  string database_name = 4;
  // The expiration time of the backup, with microseconds granularity
  // that must be at least 6 hours and at most 366 days
  // from the time the request is received.
  int64 expire_time = 5;
  // The version time of the backup, with microseconds granularity that must be
  // within the time range of [earliest_version_time, NOW], where
  // earliest_version_time is retrieved by cloud spanner frontend API (See
  // details: go/cs-pitr-lite-design).
  optional int64 version_time = 6;
}

// Action that copies a Cloud Spanner backup.
message CopyCloudBackupAction {
  // Required. Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Required. Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 2;
  // Required. The id of the backup to be created, e.g. "test-backup".
  string backup_id = 3;
  // Required. The fully qualified uri of the source backup from which this
  // backup was copied. eg.
  // "projects/<project_id>/instances/<instance_id>/backups/<backup_id>".
  string source_backup = 4;
  // Required. The expiration time of the backup, with microseconds granularity
  // that must be at least 6 hours and at most 366 days
  // from the time the request is received.
  int64 expire_time = 5;
}

// Action that gets a Cloud Spanner database backup.
message GetCloudBackupAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 2;
  // The id of the backup to get, e.g. "test-backup".
  string backup_id = 3;
}

// Action that updates a Cloud Spanner database backup.
message UpdateCloudBackupAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 2;
  // The id of the backup to update, e.g. "test-backup".
  string backup_id = 3;
  // Updated value of expire_time, this is the only field
  // that supported to be updated.
  int64 expire_time = 4;
}

// Action that deletes a Cloud Spanner database backup.
message DeleteCloudBackupAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path), e.g. "test-instance".
  string instance_id = 2;
  // The id of the backup to delete, e.g. "test-backup".
  string backup_id = 3;
}

// Action that lists Cloud Spanner database backups.
message ListCloudBackupsAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path) to list backups from, e.g. "test-instance".
  string instance_id = 2;
  // A filter expression that filters backups listed in the response.
  // The expression must specify the field name, a comparison operator,
  // and the value that you want to use for filtering.
  // Refer backup.proto.ListBackupsRequest for detail.
  string filter = 3;
  // Number of backups to be returned in the response. If 0 or
  // less, defaults to the server's maximum allowed page size.
  int32 page_size = 4;
  // If non-empty, "page_token" should contain a next_page_token
  // from a previous ListBackupsResponse to the same "parent"
  // and with the same "filter".
  string page_token = 5;
}

// Action that lists Cloud Spanner database backup operations.
message ListCloudBackupOperationsAction {
  // Cloud project ID, e.g. "spanner-cloud-systest".
  string project_id = 1;
  // Cloud instance ID (not path) to list backup operations from,
  // e.g. "test-instance".
  string instance_id = 2;
  // A filter expression that filters what operations are returned in the
  // response.
  // The expression must specify the field name, a comparison operator,
  // and the value that you want to use for filtering.
  // Refer backup.proto.ListBackupOperationsRequest for detail.
  string filter = 3;
  // Number of backups to be returned in the response. If 0 or
  // less, defaults to the server's maximum allowed page size.
  int32 page_size = 4;
  // If non-empty, "page_token" should contain a next_page_token
  // from a previous ListBackupOperationsResponse to the same "parent"
  // and with the same "filter".
  string page_token = 5;
}

// Action that gets an operation.
message GetOperationAction {
  // The name of the operation resource.
  string operation_name = 1;
}

// Action that cancels an operation.
message CancelOperationAction {
  // The name of the operation resource to be cancelled.
  string operation_name = 1;
}


// SpannerActionOutcome defines a result of execution of a single SpannerAction.
message SpannerActionOutcome {
  // If an outcome is split into multiple parts, status will be set only in the
  // last part.
  google.rpc.Status status = 1;
  // Transaction timestamp in Unix micros. It must be set for successful
  // committing actions.
  int64 timestamp = 2;
  // Result of a ReadAction. This field must be set for ReadActions even if
  // no rows were read.
  ReadResult read_result = 3;
  // This bit indicates that Spanner has restarted the current transaction. It
  // means that the client should replay all the reads and writes.
  // Setting it to true is only valid in the context of a read-write
  // transaction, as an outcome of a committing FinishTransactionAction.
  bool transaction_restarted = 4;
  // Result of admin related actions.
  AdminResult admin_result = 5;
}

// AdminResult contains admin action results, for database/backup/operation.
message AdminResult {
  // Results of cloud backup related actions.
  CloudBackupResponse backup_response = 1;
  // Results of operation related actions.
  OperationResponse operation_response = 2;
  // Results of database related actions.
  CloudDatabaseResponse database_response = 3;
  // Results of instance related actions.
  CloudInstanceResponse instance_response = 4;
  // Results of instance config related actions.
  CloudInstanceConfigResponse instance_config_response = 5;
}

// CloudBackupResponse contains results returned by cloud backup related
// actions.
message CloudBackupResponse {
  // Backup returned by
  // GetCloudBackupAction/UpdateCloudBackupAction.
  google.spanner.admin.database.v1.Backup backup = 1;
  // List of backups returned by ListCloudBackupsAction.
  repeated google.spanner.admin.database.v1.Backup listed_backup = 2;
  // List of operations returned by ListCloudBackupOperationsAction.
  repeated google.longrunning.Operation listed_backup_operation = 3;
  // "next_page_token" can be sent in a subsequent list action
  // to fetch more of the matching data.
  string next_page_token = 4;
}

// OperationResponse contains results returned by operation related actions.
message OperationResponse {
  // Operation returned by GetOperationAction.
  google.longrunning.Operation operation = 1;
  // List of operations returned by ListOperationsAction.
  repeated google.longrunning.Operation listed_operation = 2;
  // "next_page_token" can be sent in a subsequent list action
  // to fetch more of the matching data.
  string next_page_token = 3;
}

// CloudInstanceResponse contains results returned by cloud instance related
// actions.
message CloudInstanceResponse {
  // Instance returned by GetCloudInstanceAction
  google.spanner.admin.instance.v1.Instance instance = 1;
  // List of instances returned by ListCloudInstancesAction.
  repeated google.spanner.admin.instance.v1.Instance listed_instance = 2;
  // "next_page_token" can be sent in a subsequent list action
  // to fetch more of the matching data.
  string next_page_token = 3;
}

// CloudInstanceConfigResponse contains results returned by cloud instance
// config related actions.
message CloudInstanceConfigResponse {
  // List of instance configs returned by ListCloudInstanceConfigsAction.
  repeated google.spanner.admin.instance.v1.InstanceConfig
    listed_instance_config = 1;
  // "next_page_token" can be sent in a subsequent list action
  // to fetch more of the matching data.
  string next_page_token = 2;
  // Instance config returned by GetCloudInstanceConfigAction.
  google.spanner.admin.instance.v1.InstanceConfig instance_config = 3;
}

// CloudDatabaseResponse contains results returned by cloud database related
// actions.
message CloudDatabaseResponse {
  // Database returned by GetCloudDatabaseAction
  google.spanner.admin.database.v1.Database database = 1;
  // List of databases returned by ListCloudDatabasesAction.
  repeated google.spanner.admin.database.v1.Database listed_database = 2;
  // List of operations returned by ListCloudDatabaseOperationsAction.
  repeated google.longrunning.Operation listed_database_operation = 3;
  // "next_page_token" can be sent in a subsequent list action
  // to fetch more of the matching data.
  string next_page_token = 4;
}

// ReadResult contains rows read. If it's a result of a multiread, each
// ReadResult's rows belong to a single multiread request.
message ReadResult {
  // Table name.
  string table = 1;
  // Index name, if read from an index.
  optional string index = 2;
  // Request index (multiread only).
  optional int32 request_index = 3;
  // Rows read. Each row is a struct with multiple fields, one for each column
  // in read result. All rows have the same type.
  repeated ValueList row = 4;
  // The type of rows read. It must be set if at least one row was read.
  optional google.spanner.v1.StructType row_type = 5;
}
