{
  "statements":
  [
    {
      "name": "SHOW [VARIABLE] AUTOCOMMIT",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?autocommit\\s*\\z",
      "method": "statementShowAutocommit",
      "exampleStatements": ["show autocommit","show variable autocommit"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.READONLY",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.readonly\\s*\\z",
      "method": "statementShowReadOnly",
      "exampleStatements": ["show spanner.readonly","show variable spanner.readonly"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.RETRY_ABORTS_INTERNALLY",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.retry_aborts_internally\\s*\\z",
      "method": "statementShowRetryAbortsInternally",
      "exampleStatements": ["show spanner.retry_aborts_internally","show variable spanner.retry_aborts_internally"],
      "examplePrerequisiteStatements": ["set spanner.readonly=false", "set autocommit=false"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.AUTOCOMMIT_DML_MODE",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.autocommit_dml_mode\\s*\\z",
      "method": "statementShowAutocommitDmlMode",
      "exampleStatements": ["show spanner.autocommit_dml_mode","show variable spanner.autocommit_dml_mode"]
    },
    {
      "name": "SHOW [VARIABLE] STATEMENT_TIMEOUT",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?statement_timeout\\s*\\z",
      "method": "statementShowStatementTimeout",
      "exampleStatements": ["show statement_timeout","show variable statement_timeout"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.READ_TIMESTAMP",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.read_timestamp\\s*\\z",
      "method": "statementShowReadTimestamp",
      "exampleStatements": ["show spanner.read_timestamp","show variable spanner.read_timestamp"],
      "examplePrerequisiteStatements": ["set spanner.readonly = true", "SELECT 1 AS TEST"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.COMMIT_TIMESTAMP",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.commit_timestamp\\s*\\z",
      "method": "statementShowCommitTimestamp",
      "exampleStatements": ["show spanner.commit_timestamp","show variable spanner.commit_timestamp"],
      "examplePrerequisiteStatements": ["update foo set bar=1"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.READ_ONLY_STALENESS",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.read_only_staleness\\s*\\z",
      "method": "statementShowReadOnlyStaleness",
      "exampleStatements": ["show spanner.read_only_staleness","show variable spanner.read_only_staleness"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.OPTIMIZER_VERSION",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.optimizer_version\\s*\\z",
      "method": "statementShowOptimizerVersion",
      "exampleStatements": ["show spanner.optimizer_version","show variable spanner.optimizer_version"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.OPTIMIZER_STATISTICS_PACKAGE",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.optimizer_statistics_package\\s*\\z",
      "method": "statementShowOptimizerStatisticsPackage",
      "exampleStatements": ["show spanner.optimizer_statistics_package","show variable spanner.optimizer_statistics_package"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.RETURN_COMMIT_STATS",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.return_commit_stats\\s*\\z",
      "method": "statementShowReturnCommitStats",
      "exampleStatements": ["show spanner.return_commit_stats","show variable spanner.return_commit_stats"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.COMMIT_RESPONSE",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.commit_response\\s*\\z",
      "method": "statementShowCommitResponse",
      "exampleStatements": ["show spanner.commit_response","show variable spanner.commit_response"],
      "examplePrerequisiteStatements": ["update foo set bar=1"]
    },
    {
      "name": "SHOW [VARIABLE] SPANNER.STATEMENT_TAG",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.statement_tag\\s*\\z",
      "method": "statementShowStatementTag",
      "exampleStatements": ["show spanner.statement_tag","show variable spanner.statement_tag"]
    },
    {
      "name": "SHOW [VARIABLE] TRANSACTION_TAG",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.transaction_tag\\s*\\z",
      "method": "statementShowTransactionTag",
      "exampleStatements": ["show spanner.transaction_tag","show variable spanner.transaction_tag"]
    },
    {
      "name": "SHOW [VARIABLE] RPC_PRIORITY",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "RESULT_SET",
      "regex": "(?is)\\A\\s*show\\s+(?:variable\\s+)?spanner\\.rpc_priority\\s*\\z",
      "method": "statementShowRPCPriority",
      "exampleStatements": ["show spanner.rpc_priority","show variable spanner.rpc_priority"]
    },
    {
      "name": "{START | BEGIN} [TRANSACTION | WORK]",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:begin|start)(?:\\s+transaction|\\s+work)?\\s*\\z",
      "method": "statementBeginTransaction",
      "exampleStatements": ["begin", "start", "begin transaction", "start transaction", "begin work", "start work"]
    },
    {
      "name": "COMMIT [TRANSACTION | WORK] [AND NO CHAIN]",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:commit)(?:\\s+transaction|\\s+work)?(?:\\s+and\\s+no\\s+chain)?\\s*\\z",
      "method": "statementCommit",
      "exampleStatements": ["commit", "commit transaction", "commit work", "commit and no chain", "commit transaction and no chain", "commit work and no chain"],
      "examplePrerequisiteStatements": ["begin transaction"]
    },
    {
      "name": "ROLLBACK [TRANSACTION | WORK] [AND NO CHAIN]",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:rollback)(?:\\s+transaction|\\s+work)?(?:\\s+and\\s+no\\s+chain)?\\s*\\z",
      "method": "statementRollback",
      "exampleStatements": ["rollback", "rollback transaction", "rollback work", "rollback and no chain", "rollback transaction and no chain", "rollback work and no chain"],
      "examplePrerequisiteStatements": ["begin transaction"]
    },
    {
      "name": "START BATCH DDL",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:start)(?:\\s+batch)(?:\\s+ddl)\\s*\\z",
      "method": "statementStartBatchDdl",
      "exampleStatements": ["start batch ddl"]
    },
    {
      "name": "START BATCH DML",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:start)(?:\\s+batch)(?:\\s+dml)\\s*\\z",
      "method": "statementStartBatchDml",
      "exampleStatements": ["start batch dml"]
    },
    {
      "name": "RUN BATCH",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:run)(?:\\s+batch)\\s*\\z",
      "method": "statementRunBatch",
      "exampleStatements": ["run batch"],
      "examplePrerequisiteStatements": ["start batch ddl"]
    },
    {
      "name": "ABORT BATCH",
      "executorName": "ClientSideStatementNoParamExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*(?:abort)(?:\\s+batch)\\s*\\z",
      "method": "statementAbortBatch",
      "exampleStatements": ["abort batch"],
      "examplePrerequisiteStatements": ["start batch ddl"]
    },
    {
      "name": "SET AUTOCOMMIT = TRUE|FALSE",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+autocommit\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetAutocommit",
      "exampleStatements": ["set autocommit = true", "set autocommit = false"],
      "setStatement": {
        "propertyName": "AUTOCOMMIT",
        "separator": "=",
        "allowedValues": "(TRUE|FALSE)",
        "converterName": "ClientSideStatementValueConverters$BooleanConverter"
      }
    },
    {
      "name": "SET SPANNER.READONLY = TRUE|FALSE",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.readonly\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetReadOnly",
      "exampleStatements": ["set spanner.readonly = true", "set spanner.readonly = false"],
      "setStatement": {
        "propertyName": "SPANNER.READONLY",
        "separator": "=",
        "allowedValues": "(TRUE|FALSE)",
        "converterName": "ClientSideStatementValueConverters$BooleanConverter"
      }
    },
    {
      "name": "SET SPANNER.RETRY_ABORTS_INTERNALLY = TRUE|FALSE",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.retry_aborts_internally\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetRetryAbortsInternally",
      "exampleStatements": ["set spanner.retry_aborts_internally = true", "set spanner.retry_aborts_internally = false"],
      "examplePrerequisiteStatements": ["set spanner.readonly = false", "set autocommit = false"],
      "setStatement": {
        "propertyName": "SPANNER.RETRY_ABORTS_INTERNALLY",
        "separator": "=",
        "allowedValues": "(TRUE|FALSE)",
        "converterName": "ClientSideStatementValueConverters$BooleanConverter"
      }
    },
    {
      "name": "SET SPANNER.AUTOCOMMIT_DML_MODE = 'PARTITIONED_NON_ATOMIC'|'TRANSACTIONAL'",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.autocommit_dml_mode\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetAutocommitDmlMode",
      "exampleStatements": ["set spanner.autocommit_dml_mode='PARTITIONED_NON_ATOMIC'", "set spanner.autocommit_dml_mode='TRANSACTIONAL'"],
      "setStatement": {
        "propertyName": "SPANNER.AUTOCOMMIT_DML_MODE",
        "separator": "=",
        "allowedValues": "'(PARTITIONED_NON_ATOMIC|TRANSACTIONAL)'",
        "converterName": "ClientSideStatementValueConverters$AutocommitDmlModeConverter"
      }
    },
    {
      "name": "SET STATEMENT_TIMEOUT = '<duration>'|NULL",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+statement_timeout\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetStatementTimeout",
      "exampleStatements": ["set statement_timeout=null", "set statement_timeout='1s'", "set statement_timeout='100ms'", "set statement_timeout='10000us'", "set statement_timeout='9223372036854775807ns'"],
      "setStatement": {
        "propertyName": "STATEMENT_TIMEOUT",
        "separator": "=",
        "allowedValues": "('(\\d{1,19})(s|ms|us|ns)'|NULL)",
        "converterName": "ClientSideStatementValueConverters$DurationConverter"
      }
    },
    {
      "name": "SET TRANSACTION READ ONLY|READ WRITE",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+transaction\\s*(?:\\s+)\\s*(.*)\\z",
      "method": "statementSetTransactionMode",
      "exampleStatements": ["set transaction read only", "set transaction read write"],
      "examplePrerequisiteStatements": ["set autocommit = false"],
      "setStatement": {
        "propertyName": "TRANSACTION",
        "separator": "\\s+",
        "allowedValues": "(READ\\s+ONLY|READ\\s+WRITE)",
        "converterName": "ClientSideStatementValueConverters$TransactionModeConverter"
      }
    },
    {
      "name": "SET SPANNER.READ_ONLY_STALENESS = 'STRONG' | 'MIN_READ_TIMESTAMP <timestamp>' | 'READ_TIMESTAMP <timestamp>' | 'MAX_STALENESS <int64>s|ms|us|ns' | 'EXACT_STALENESS (<int64>s|ms|us|ns)'",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.read_only_staleness\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetReadOnlyStaleness",
      "exampleStatements": ["set spanner.read_only_staleness='STRONG'",
        "set spanner.read_only_staleness='MIN_READ_TIMESTAMP 2018-01-02T03:04:05.123-08:00'",
        "set spanner.read_only_staleness='MIN_READ_TIMESTAMP 2018-01-02T03:04:05.123Z'",
        "set spanner.read_only_staleness='MIN_READ_TIMESTAMP 2018-01-02T03:04:05.123+07:45'",
        "set spanner.read_only_staleness='READ_TIMESTAMP 2018-01-02T03:04:05.54321-07:00'",
        "set spanner.read_only_staleness='READ_TIMESTAMP 2018-01-02T03:04:05.54321Z'",
        "set spanner.read_only_staleness='READ_TIMESTAMP 2018-01-02T03:04:05.54321+05:30'",
        "set spanner.read_only_staleness='MAX_STALENESS 12s'",
        "set spanner.read_only_staleness='MAX_STALENESS 100ms'",
        "set spanner.read_only_staleness='MAX_STALENESS 99999us'",
        "set spanner.read_only_staleness='MAX_STALENESS 10ns'",
        "set spanner.read_only_staleness='EXACT_STALENESS 15s'",
        "set spanner.read_only_staleness='EXACT_STALENESS 1500ms'",
        "set spanner.read_only_staleness='EXACT_STALENESS 15000000us'",
        "set spanner.read_only_staleness='EXACT_STALENESS 9999ns'"],
      "setStatement": {
        "propertyName": "SPANNER.READ_ONLY_STALENESS",
        "separator": "=",
        "allowedValues": "'((STRONG)|(MIN_READ_TIMESTAMP)[\\t ]+((\\d{4})-(\\d{2})-(\\d{2})([Tt](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?)([Zz]|([+-])(\\d{2}):(\\d{2})))|(READ_TIMESTAMP)[\\t ]+((\\d{4})-(\\d{2})-(\\d{2})([Tt](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?)([Zz]|([+-])(\\d{2}):(\\d{2})))|(MAX_STALENESS)[\\t ]+((\\d{1,19})(s|ms|us|ns))|(EXACT_STALENESS)[\\t ]+((\\d{1,19})(s|ms|us|ns)))'",
        "converterName": "ClientSideStatementValueConverters$ReadOnlyStalenessConverter"
      }
    },
    {
      "name": "SET SPANNER.OPTIMIZER_VERSION = '<version>'|'LATEST'|''",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.optimizer_version\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetOptimizerVersion",
      "exampleStatements": ["set spanner.optimizer_version='1'", "set spanner.optimizer_version='200'", "set spanner.optimizer_version='LATEST'", "set spanner.optimizer_version=''"],
      "setStatement": {
        "propertyName": "SPANNER.OPTIMIZER_VERSION",
        "separator": "=",
        "allowedValues": "'((\\d{1,20})|(LATEST)|())'",
        "converterName": "ClientSideStatementValueConverters$StringValueConverter"
      }
    },
    {
      "name": "SET SPANNER.OPTIMIZER_STATISTICS_PACKAGE = '<package>'|''",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.optimizer_statistics_package\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetOptimizerStatisticsPackage",
      "exampleStatements": ["set spanner.optimizer_statistics_package='auto_20191128_14_47_22UTC'", "set spanner.optimizer_statistics_package=''"],
      "setStatement": {
        "propertyName": "SPANNER.OPTIMIZER_STATISTICS_PACKAGE",
        "separator": "=",
        "allowedValues": "'((\\S+)|())'",
        "converterName": "ClientSideStatementValueConverters$StringValueConverter"
      }
    },
    {
      "name": "SET SPANNER.RETURN_COMMIT_STATS = TRUE|FALSE",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.return_commit_stats\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetReturnCommitStats",
      "exampleStatements": ["set spanner.return_commit_stats = true", "set spanner.return_commit_stats = false"],
      "setStatement": {
        "propertyName": "SPANNER.RETURN_COMMIT_STATS",
        "separator": "=",
        "allowedValues": "(TRUE|FALSE)",
        "converterName": "ClientSideStatementValueConverters$BooleanConverter"
      }
    },
    {
      "name": "SET SPANNER.STATEMENT_TAG = '<tag>'",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.statement_tag\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetStatementTag",
      "exampleStatements": ["set spanner.statement_tag='tag1'", "set spanner.statement_tag='tag2'", "set spanner.statement_tag=''"],
      "setStatement": {
        "propertyName": "SPANNER.STATEMENT_TAG",
        "separator": "=",
        "allowedValues": "'(([a-zA-Z][a-zA-Z0-9_\\-]{1,63})|())'",
        "converterName": "ClientSideStatementValueConverters$StringValueConverter"
      }
    },
    {
      "name": "SET SPANNER.TRANSACTION_TAG = '<tag>'",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.transaction_tag\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetTransactionTag",
      "exampleStatements": ["set spanner.transaction_tag='tag1'", "set spanner.transaction_tag='tag2'", "set spanner.transaction_tag=''"],
      "examplePrerequisiteStatements": ["set autocommit = false"],
      "setStatement": {
        "propertyName": "SPANNER.TRANSACTION_TAG",
        "separator": "=",
        "allowedValues": "'(([a-zA-Z][a-zA-Z0-9_\\-]{1,63})|())'",
        "converterName": "ClientSideStatementValueConverters$StringValueConverter"
      }
    },
    {
      "name": "SET SPANNER.RPC_PRIORITY = 'HIGH'|'MEDIUM'|'LOW'|'NULL'",
      "executorName": "ClientSideStatementSetExecutor",
      "resultType": "NO_RESULT",
      "regex": "(?is)\\A\\s*set\\s+spanner\\.rpc_priority\\s*(?:=)\\s*(.*)\\z",
      "method": "statementSetRPCPriority",
      "exampleStatements": [
        "set spanner.rpc_priority='HIGH'",
        "set spanner.rpc_priority='MEDIUM'",
        "set spanner.rpc_priority='LOW'",
        "set spanner.rpc_priority='NULL'"
      ],
      "setStatement": {
        "propertyName": "SPANNER.RPC_PRIORITY",
        "separator": "=",
        "allowedValues": "'(HIGH|MEDIUM|LOW|NULL)'",
        "converterName": "ClientSideStatementValueConverters$RpcPriorityConverter"
      }
    }
  ]
}
